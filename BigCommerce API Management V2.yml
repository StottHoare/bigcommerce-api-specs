info:
  contact:
    email: support@bigcommerce.com
    name: BigCommerce
    url: https://www.bigcommerce.com
  description: BigCommerce API Management V2
  termsOfService: https://www.bigcommerce.com/terms
  title: BigCommerce API Management V2
  version: 3.0.0
openapi: 3.0.0
paths:
  /banners:
    delete:
      description: By default, it deletes all *Banners*.
      operationId: deleteAllBanners
      responses:
        '204':
          content: {}
          description: ''
      summary: Delete All Banners
      tags:
      - Banners
    get:
      description: Returns a list of *Banners*. Default sorting is by banner id, from
        lowest to highest.
      operationId: getAllBanners
      parameters:
      - description: Optional filter param `/api/v2/banners?min_id={value}`
        in: query
        name: min_id
        schema:
          exclusiveMaximum: false
          exclusiveMinimum: false
          type: integer
      - description: Optional filter param `/api/v2/banners?max_id={value}`
        in: query
        name: max_id
        schema:
          exclusiveMaximum: false
          exclusiveMinimum: false
          type: integer
      - description: Optional filter param `/api/v2/banners?page={number}`
        in: query
        name: page
        schema:
          exclusiveMaximum: false
          exclusiveMinimum: false
          type: number
      - description: Optional filter param `/api/v2/banners?limit={count}`
        in: query
        name: limit
        schema:
          exclusiveMaximum: false
          exclusiveMinimum: false
          type: number
      responses:
        '200':
          content:
            application/json:
              example:
              - content: <p>This is a banner</p>
                date_created: '1522169082'
                date_from: '0'
                date_to: '0'
                date_type: always
                id: 1
                item_id: '0'
                location: top
                name: This is a banner
                page: home_page
                visible: '1'
              - content: '<p>Banner # 2</p>'
                date_created: '1522169169'
                date_from: '0'
                date_to: '0'
                date_type: always
                id: 2
                item_id: '23'
                location: top
                name: 'Banner #2'
                page: category_page
                visible: '1'
              schema:
                items:
                  $ref: '#/components/schemas/banner_Full'
                type: array
          description: ''
      summary: Get All Banners
      tags:
      - Banners
    parameters:
    - $ref: '#/components/parameters/Accept'
    post:
      description: 'Creates a *Banner*.


        **Required Fields**

        * name

        * content

        * page

        * location

        * date_type


        **Read Only Fields**

        * date_created

        * id'
      operationId: createABanner
      parameters:
      - $ref: '#/components/parameters/ContentType'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/banner_Base'
        required: true
      responses:
        '200':
          content:
            application/json:
              example:
                content: <p> Sale! Tuesday at 9am! </p>
                date_created: '1522169082'
                date_from: '0'
                date_to: '0'
                date_type: always
                id: 1
                item_id: '0'
                location: top
                name: Sale Banner
                page: home_page
                visible: '1'
              schema:
                $ref: '#/components/schemas/banner_Full'
          description: ''
      summary: Create a Banner
      tags:
      - Banners
      x-codegen-request-body-name: body
  /banners/count:
    get:
      description: Returns a count of *Banners*.
      operationId: getACountOfBanners
      responses:
        '200':
          content:
            application/json:
              example:
                count: 27
              schema:
                properties:
                  count:
                    minimum: 0
                    type: integer
                type: object
          description: ''
      summary: Get a Count of Store Banners
      tags:
      - Banners
    parameters:
    - $ref: '#/components/parameters/Accept'
  /banners/{id}:
    delete:
      description: Deletes a *Banner*.
      operationId: deleteABanner
      responses:
        '204':
          content: {}
          description: ''
      summary: Delete a Banner
      tags:
      - Banners
    get:
      description: Returns a single *Banner*
      operationId: getABanner
      responses:
        '200':
          content:
            application/json:
              example:
                content: <p> Sale! Tuesday at 9am! </p>
                date_created: '1522169082'
                date_from: '0'
                date_to: '0'
                date_type: always
                id: 1
                item_id: '0'
                location: top
                name: Sale Banner
                page: home_page
                visible: '1'
              schema:
                $ref: '#/components/schemas/banner_Full'
          description: ''
      summary: Get a Banner
      tags:
      - Banners
    parameters:
    - $ref: '#/components/parameters/Accept'
    - description: ID of the banner.
      in: path
      name: id
      required: true
      schema:
        exclusiveMaximum: false
        exclusiveMinimum: false
        type: integer
    put:
      description: 'Updates a *Banner*.


        **Read Only Fields**

        * date_created

        * id'
      operationId: updateABanner
      parameters:
      - $ref: '#/components/parameters/ContentType'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/banner_Put'
        required: true
      responses:
        '200':
          content:
            application/json:
              example:
                content: <p> Sale! Tuesday at 9am! </p>
                date_created: Tue, 13 Mar 2018 16:18:59 +0000
                date_from: '0'
                date_to: '0'
                date_type: always
                id: 1
                item_id: '0'
                location: top
                name: Sale Banner
                page: home_page
                visible: '1'
              schema:
                $ref: '#/components/schemas/banner_Full'
          description: ''
      summary: Update a Banner
      tags:
      - Banners
      x-codegen-request-body-name: body
  /blog/posts:
    delete:
      description: Deletes a page of `Blog Posts`.
      operationId: deleteAllBlogPosts
      parameters:
      - description: Filter param.
        in: query
        name: page
        schema:
          exclusiveMaximum: false
          exclusiveMinimum: false
          maximum: 250
          type: number
      - description: Filter param.
        in: query
        name: limit
        schema:
          exclusiveMaximum: false
          exclusiveMinimum: false
          maximum: 50
          type: number
      responses:
        '204':
          content: {}
          description: ''
      summary: Delete Blog Posts
      tags:
      - Blog Posts
    get:
      description: Returns all *Blog Posts*. Default sorting is by published_date,
        beginning with the most recent post.
      operationId: getAllBlogPosts
      parameters:
      - description: Filter param.
        in: query
        name: is_published
        schema:
          type: string
      - description: Filter param. Value must be URL encoded.
        in: query
        name: url
        schema:
          type: string
      - description: Filter param.
        in: query
        name: tag
        schema:
          type: string
      - description: Filter param.
        in: query
        name: published_date
        schema:
          format: date-time
          type: string
      - description: Filter param.
        in: query
        name: page
        schema:
          exclusiveMinimum: false
          maximum: 50
          type: number
      - description: Filter param.
        in: query
        name: limit
        schema:
          exclusiveMaximum: false
          exclusiveMinimum: false
          maximum: 250
          type: number
      responses:
        '200':
          content:
            application/json:
              example:
              - author: ''
                body: <p>Jelly beans muffin marzipan gingerbread donut dessert. Cheesecake
                  cheesecake sugar plum cookie cake tart. Soufflé sesame snaps jelly
                  beans brownie chocolate tart. Marshmallow jujubes candy pie. Gummies
                  lemon drops tart soufflé pastry pie. Caramels wafer biscuit gummi
                  bears. Liquorice toffee wafer bear claw marzipan jelly-o. Dessert
                  bear claw topping icing croissant. Pie bonbon chocolate bar chocolate
                  bar tiramisu chocolate lemon drops candy.</p><p>Marshmallow cupcake
                  sweet roll candy marshmallow caramels cotton candy pie icing. Powder
                  jelly beans chupa chups lollipop liquorice marzipan dessert soufflé
                  sesame snaps. Macaroon chupa chups gummies cheesecake ice cream
                  caramels sesame snaps cotton candy gingerbread. Chocolate cake fruitcake
                  tart bear claw lemon drops tart dragée tart apple pie. Halvah chupa
                  chups soufflé jelly soufflé marshmallow. Croissant tart tart. Gingerbread
                  apple pie biscuit.</p><p>Wafer lemon drops tart pastry brownie chocolate
                  bar jelly. Dragée muffin cupcake liquorice caramels marzipan gingerbread
                  marzipan. Apple pie pudding jelly sweet roll croissant bonbon wafer.
                  Cookie chocolate bar sesame snaps bonbon macaroon candy canes donut
                  sugar plum. Bear claw bonbon tootsie roll bonbon. Apple pie gummies
                  donut sweet. Marzipan bear claw cotton candy topping dragée bonbon
                  danish powder.</p>
                id: 3
                is_published: true
                meta_description: Cupcakes post 2
                meta_keywords: sugar,sweet,spice,everything,nice
                preview_url: /blog/hello-again/
                published_date:
                  date: '2018-05-18 08:26:42.000000'
                  timezone: +00:00
                  timezone_type: 1
                published_date_iso8601: 2018-05-18T13:26:42+0000
                summary: Jelly beans muffin marzipan gingerbread donut dessert. Cheesecake
                  cheesecake sugar plum cookie cake tart. Soufflé sesame snaps jelly
                  beans brownie chocolate tart. Marshmallow jujubes candy pie. Gummies
                  lemon drops tart soufflé pastry pie. Caramels wafer biscuit gummi
                  bears. Liquorice toffee wafer bear claw marzipan jelly-o. Dessert
                  bear claw topping icing croissant. Pie bonbon chocolate bar [...]
                tags:
                - sugar
                - sweet
                - spice
                - everything
                - nice
                thumbnail_path: ''
                title: Hello Again
                url: /blog/hello-again/
              - author: ''
                body: <p>Jelly beans muffin marzipan gingerbread donut dessert. Cheesecake
                  cheesecake sugar plum cookie cake tart. Soufflé sesame snaps jelly
                  beans brownie chocolate tart. Marshmallow jujubes candy pie. Gummies
                  lemon drops tart soufflé pastry pie. Caramels wafer biscuit gummi
                  bears. Liquorice toffee wafer bear claw marzipan jelly-o. Dessert
                  bear claw topping icing croissant. Pie bonbon chocolate bar chocolate
                  bar tiramisu chocolate lemon drops candy.</p><p>Marshmallow cupcake
                  sweet roll candy marshmallow caramels cotton candy pie icing. Powder
                  jelly beans chupa chups lollipop liquorice marzipan dessert soufflé
                  sesame snaps. Macaroon chupa chups gummies cheesecake ice cream
                  caramels sesame snaps cotton candy gingerbread. Chocolate cake fruitcake
                  tart bear claw lemon drops tart dragée tart apple pie. Halvah chupa
                  chups soufflé jelly soufflé marshmallow. Croissant tart tart. Gingerbread
                  apple pie biscuit.</p><p>Wafer lemon drops tart pastry brownie chocolate
                  bar jelly. Dragée muffin cupcake liquorice caramels marzipan gingerbread
                  marzipan. Apple pie pudding jelly sweet roll croissant bonbon wafer.
                  Cookie chocolate bar sesame snaps bonbon macaroon candy canes donut
                  sugar plum. Bear claw bonbon tootsie roll bonbon. Apple pie gummies
                  donut sweet. Marzipan bear claw cotton candy topping dragée bonbon
                  danish powder.</p>
                id: 2
                is_published: true
                meta_description: cupcake blog post
                meta_keywords: cupcakes,sugar,sweet
                preview_url: /blog/hello/
                published_date:
                  date: '2018-05-18 08:26:00.000000'
                  timezone: +00:00
                  timezone_type: 1
                published_date_iso8601: 2018-05-18T13:26:00+0000
                summary: Jelly beans muffin marzipan gingerbread donut dessert. Cheesecake
                  cheesecake sugar plum cookie cake tart. Soufflé sesame snaps jelly
                  beans brownie chocolate tart. Marshmallow jujubes candy pie. Gummies
                  lemon drops tart soufflé pastry pie. Caramels wafer biscuit gummi
                  bears. Liquorice toffee wafer bear claw marzipan jelly-o. Dessert
                  bear claw topping icing croissant. Pie bonbon chocolate bar [...]
                tags:
                - cupcakes
                - sugar
                - sweet
                thumbnail_path: ''
                title: Hello
                url: /blog/hello/
              - author: ''
                body: <p><strong>Welcome to your blog!</strong><br> A blog is a great
                  place to share details on your products, business and whatever else
                  you think your shoppers might like to hear from you. You can include
                  photos in your blog posts and even videos. For ideas and inspiration
                  on how to structure your blog, take a look at the BigCommerce <a
                  href='http://blog.bigcommerce.com/' target='_blank' rel='nofollow'>ecommerce
                  blog</a>.</p><p><strong>How can I delete this post?</strong><br>To
                  delete this post and add your own, login to your <a href='/admin'
                  target='_blank'>admin area</a> and go to Storefront > Blog in the
                  left hand menu.</p><p><strong>Powered by BigCommerce</strong><br>Your
                  website, online store and blog are powered by BigCommerce <a href='http://www.bigcommerce.com/'
                  target='_blank' rel='nofollow'>ecommerce software</a>. It includes
                  everything you need to run a beautiful online store including <a
                  href='http://www.bigcommerce.com/templates/' target='_blank' rel='nofollow'>ecommerce
                  website templates</a>, <a href='http://www.bigcommerce.com/features/hosting/'
                  target='_blank' rel='nofollow'>ecommerce hosting</a>, an <a href='http://www.bigcommerce.com/features/setup/'
                  target='_blank' rel='nofollow'>online shopping cart</a> and more.</p>
                id: 1
                is_published: true
                meta_description: ''
                meta_keywords: Blog,SEO
                preview_url: /your-first-blog-post/
                published_date:
                  date: '2014-02-15 14:46:34.000000'
                  timezone: +00:00
                  timezone_type: 1
                published_date_iso8601: 2014-02-15T19:46:34+0000
                summary: ' Welcome to your blog! A blog is a great place to share
                  details on your products, business and whatever else you think your
                  shoppers might like to hear from you. You can include photos in
                  your blog posts and even videos. For ideas and inspiration on how
                  to structure your blog, take a look [...]'
                tags:
                - Blog
                - SEO
                thumbnail_path: ''
                title: Your first blog post!
                url: /your-first-blog-post/
              schema:
                items:
                  $ref: '#/components/schemas/blogPost_Full'
                type: array
          description: ''
      summary: Get All Blog Posts
      tags:
      - Blog Posts
    parameters:
    - $ref: '#/components/parameters/Accept'
    post:
      description: 'Creates a *Blog Post*.


        **Required Fields**

        *   `title`

        *   `body`


        **Notes**


        * When including `published_date` in a request, supply it as a flat date string
        (not an object) in valid <a href="http://tools.ietf.org/html/rfc2822#section-3.3"
        target="_blank">RFC 2822</a>. The&#160;example request below includes a `published_date`
        in RFC 2822 format.

        * Blog posts default to draft status. To publish blog posts to the storefront,
        set the `is_published` property to `true`.

        * If a custom URL is not provided, the post’s URL will be generated based
        on the value of `title`.'
      operationId: createABlogPosts
      parameters:
      - $ref: '#/components/parameters/ContentType'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/blogPost_Base_Post'
        required: true
      responses:
        '200':
          content:
            application/json:
              example:
                author: BigCommerce
                body: '<p>Customize your site, manage shipping and payments, and list
                  your products on Amazon, eBay, and Facebook by Meta with the #1
                  ecommerce platform. </p>'
                id: 3
                is_published: true
                meta_description: Welcome Post
                meta_keywords: BigCommerce, welcome, ecommerce
                preview_url: /blog/welcome-bigcommerce/
                published_date:
                  date: '2018-05-18T08:26:42.000Z'
                  timezone: +00:00
                  timezone_type: 1
                published_date_iso8601: '2018-05-18T13:26:42.000Z'
                summary: <p>We power ecommerce websites for successful retailers all
                  over the world</p>
                tags:
                - BigCommerce
                - welcome
                - ecommerce
                thumbnail_path: ''
                title: Welcome to BigCommerce
                url: /blog/welcome-bigcommerce/
              schema:
                $ref: '#/components/schemas/blogPost_Base_Res'
          description: ''
        '207':
          content:
            application/json:
              schema:
                type: object
          description: Multiple operations have taken place and the status for each
            operation can be viewed in the body of the response. Typically indicates
            that a partial failure has occured, such as when a `POST` or `PUT` request
            is successful, but saving the URL has failed.
      summary: Create a Blog Post
      tags:
      - Blog Posts
  /blog/posts/count:
    get:
      description: Returns a count of all *Blog Posts*.
      operationId: getACountOfAllBlogPosts
      responses:
        '200':
          content:
            application/json:
              example:
                count: 27
              schema:
                $ref: '#/components/schemas/count_Response'
          description: ''
      summary: Get A Count of All Blog Posts
      tags:
      - Blog Posts
    parameters:
    - $ref: '#/components/parameters/Accept'
  /blog/posts/{id}:
    delete:
      description: Deletes a *Blog Post*.
      operationId: deleteABlogPost
      responses:
        '204':
          content: {}
          description: ''
      summary: Delete a Blog Post
      tags:
      - Blog Posts
    get:
      description: Returns a single *Blog Post*.
      operationId: getABlogPost
      responses:
        '200':
          content:
            application/json:
              example:
                author: BigCommerce
                body: '<p>Customize your site, manage shipping and payments, and list
                  your products on Amazon, eBay, and Facebook by Meta with the #1
                  ecommerce platform. </p>'
                id: 3
                is_published: true
                meta_description: Welcome Post
                meta_keywords: BigCommerce, welcome, ecommerce
                preview_url: /blog/welcome-bigcommerce/
                published_date:
                  date: '2018-05-18T08:26:42.000Z'
                  timezone: +00:00
                  timezone_type: 1
                published_date_iso8601: '2018-05-18T13:26:42.000Z'
                summary: <p>We power ecommerce websites for successful retailers all
                  over the world</p>
                tags:
                - BigCommerce
                - welcome
                - ecommerce
                thumbnail_path: ''
                title: Welcome to BigCommerce
                url: /blog/welcome-bigcommerce/
              schema:
                $ref: '#/components/schemas/blogPost_Full'
          description: ''
      summary: Get a Blog Post
      tags:
      - Blog Posts
    parameters:
    - $ref: '#/components/parameters/Accept'
    - description: ID of the blog post.
      in: path
      name: id
      required: true
      schema:
        exclusiveMaximum: false
        exclusiveMinimum: false
        type: integer
    put:
      description: 'Updates a *Blog Post*.


        **Notes**


        * When including `published_date` in a request, supply it as a flat date string
        (not an object) in valid <a href="http://tools.ietf.org/html/rfc2822#section-3.3"
        target="_blank">RFC 2822</a>. The&#160;example request below includes a `published_date`
        in RFC 2822 format.


        * Blog posts default to draft status. To publish blog posts to the storefront,
        set the `is_published` property to `true`.'
      operationId: updateABlogPost
      parameters:
      - $ref: '#/components/parameters/ContentType'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/blogPost_Base_Post'
        required: true
      responses:
        '200':
          content:
            application/json:
              example:
                author: BigCommerce
                body: '<p>Customize your site, manage shipping and payments, and list
                  your products on Amazon, eBay, and Facebook by Meta with the #1
                  ecommerce platform. </p>'
                id: 3
                is_published: true
                meta_description: Welcome Post
                meta_keywords: BigCommerce, welcome, ecommerce
                preview_url: /blog/welcome-bigcommerce/
                published_date:
                  date: '2018-05-18T08:26:42.000Z'
                  timezone: +00:00
                  timezone_type: 1
                published_date_iso8601: '2018-05-18T13:26:42.000Z'
                summary: <p>We power ecommerce websites for successful retailers all
                  over the world</p>
                tags:
                - BigCommerce
                - welcome
                - ecommerce
                thumbnail_path: ''
                title: Welcome to BigCommerce
                url: /blog/welcome-bigcommerce/
              schema:
                $ref: '#/components/schemas/blogPost_Base_Res'
          description: ''
        '207':
          content:
            application/json:
              schema:
                type: object
          description: Multiple operations have taken place and the status for each
            operation can be viewed in the body of the response. Typically indicates
            that a partial failure has occurred, such as when a `POST` or `PUT` request
            is successful, but saving the URL has failed.
      summary: Update a Blog Post
      tags:
      - Blog Posts
      x-codegen-request-body-name: body
  /blog/tags:
    get:
      description: Returns a list of *Blog Tags*.
      operationId: getAllBlogTags
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/blogTags'
                type: array
          description: ''
      summary: Get All Blog Tags
      tags:
      - Blog Tags
    parameters:
    - $ref: '#/components/parameters/Accept'
  /countries:
    get:
      description: Get a list of all countries available. A country or territory,
        identifiable by an ISO 3166 country code.
      parameters:
      - description: ''
        in: header
        name: Accept
        required: true
        schema:
          default: application/json
          type: string
      - description: ''
        in: header
        name: Content-Type
        required: true
        schema:
          default: application/json
          type: string
      - description: Number of pages
        in: query
        name: page
        required: false
        schema:
          exclusiveMaximum: false
          exclusiveMinimum: false
          type: number
      - description: Count per page
        in: query
        name: limit
        required: false
        schema:
          exclusiveMaximum: false
          exclusiveMinimum: false
          type: number
      - in: query
        name: country
        schema:
          type: string
      - in: query
        name: country_iso2
        schema:
          type: string
      - in: query
        name: country_iso3
        schema:
          type: string
      responses:
        '200':
          $ref: '#/components/responses/countryCollection_Resp'
      summary: Get All Countries
      tags:
      - Countries
  /countries/count:
    get:
      description: Returns a count of all countries.
      operationId: countriesCount
      responses:
        '200':
          $ref: '#/components/responses/countResponse'
      summary: Get a Count of All Countries
      tags:
      - Countries
  /countries/states:
    get:
      description: Returns a list of all states.
      parameters:
      - description: The number of results to return per request.
        in: query
        name: limit
        schema:
          type: integer
      - description: The ordered grouping of results to return.
        in: query
        name: page
        schema:
          type: integer
      responses:
        '200':
          $ref: '#/components/responses/countriesStatesCollectionResponse'
      summary: Get All States
      tags:
      - States
  /countries/states/count:
    get:
      description: Returns a count of all states.
      responses:
        '200':
          $ref: '#/components/responses/countResponse'
      summary: Get a Count of All States
      tags:
      - States
  /countries/{country_id}/states:
    get:
      description: "Returns a list of *States* belonging to a *Country*. \nA state\
        \ or province, identifiable by an ISO 3166 subdivision code."
      parameters:
      - description: Id of the country
        in: path
        name: country_id
        required: true
        schema:
          exclusiveMaximum: false
          exclusiveMinimum: false
          type: integer
      - description: ''
        in: header
        name: Accept
        required: true
        schema:
          type: string
      - description: ''
        in: header
        name: Content-Type
        required: true
        schema:
          type: string
      - description: Name of the state/province.
        in: query
        name: state
        required: false
        schema:
          type: string
      - description: Abbreviation for the state/province.
        in: query
        name: state_abbreviation
        required: false
        schema:
          type: string
      - description: Number of pages
        in: query
        name: page
        required: false
        schema:
          exclusiveMaximum: false
          exclusiveMinimum: false
          type: number
      - description: Count per page
        in: query
        name: limit
        required: false
        schema:
          exclusiveMaximum: false
          exclusiveMinimum: false
          type: number
      responses:
        '200':
          $ref: '#/components/responses/countriesStatesCollectionResponse'
      summary: Get All Country's States
      tags:
      - States
    parameters:
    - in: path
      name: country_id
      required: true
      schema:
        type: string
  /countries/{country_id}/states/count:
    get:
      description: Returns a count of a country's states.
      responses:
        '200':
          $ref: '#/components/responses/countResponse'
      summary: 'Get a Count of Country’s States '
      tags:
      - States
    parameters:
    - in: path
      name: country_id
      required: true
      schema:
        type: string
  /countries/{country_id}/states/{id}:
    get:
      description: "Returns a *State*. \nA state or province, identifiable by an ISO\
        \ 3166 subdivision code."
      parameters:
      - description: Id of the country
        in: path
        name: country_id
        required: true
        schema:
          exclusiveMaximum: false
          exclusiveMinimum: false
          type: integer
      - description: Id of the states
        in: path
        name: id
        required: true
        schema:
          exclusiveMaximum: false
          exclusiveMinimum: false
          type: integer
      - description: ''
        in: header
        name: Accept
        required: true
        schema:
          default: application/json
          type: string
      - description: ''
        in: header
        name: Content-Type
        required: true
        schema:
          default: application/json
          type: string
      responses:
        '200':
          $ref: '#/components/responses/countriesStatesResponse'
      summary: Get a Country's State
      tags:
      - States
      x-operation-settings:
        AllowDynamicFormParameters: false
        AllowDynamicQueryParameters: false
        CollectParameters: false
        IsMultiContentStreaming: false
      x-unitTests: []
    parameters:
    - in: path
      name: country_id
      required: true
      schema:
        type: string
    - in: path
      name: id
      required: true
      schema:
        type: string
  /countries/{id}:
    get:
      description: Returns a single *Country*.  Gets a country. A country or territory,
        identifiable by an ISO 3166 country code.
      parameters:
      - description: The id of the country.
        in: path
        name: id
        required: true
        schema:
          exclusiveMaximum: false
          exclusiveMinimum: false
          type: integer
      - description: ''
        in: header
        name: Accept
        required: true
        schema:
          default: application/json
          type: string
      - description: ''
        in: header
        name: Content-Type
        required: true
        schema:
          default: application/json
          type: string
      responses:
        '200':
          $ref: '#/components/responses/countriesResponse'
      summary: Get a Country
      tags:
      - Countries
    parameters:
    - in: path
      name: id
      required: true
      schema:
        type: string
  /coupons:
    delete:
      description: '## Usage Notes

        * Deleting a coupon via this endpoint will delete the coupon but not the promotion
        it is attached to

        '
      operationId: deleteAllCoupons
      parameters:
      - description: Optional param to identify a comma separated list of ids for
          coupons to delete in a batch. `/api/v2/coupons?id:in=1,2,3`
        in: query
        name: id:in
        schema:
          type: string
      responses:
        '204':
          content: {}
          description: ''
      summary: Delete All Coupons
      tags:
      - Coupons
    get:
      description: 'Returns a list of *Coupons*. Default sorting is by coupon/discount
        id, from lowest to highest. Optional filter parameters can be passed in.


        ## Usage Notes


        Available types for `type` and `exclude_type` filters:


        |Type|

        |-|

        |`per_item_discount`|

        |`percentage_discount`|

        |`per_total_discount`|

        |`shipping_discount`|

        |`free_shipping`|

        |`promotion`|


        Coupons with `type=promotion` will not populate usable data for the following
        fields but instead be set to the following default values:


        ```json

        ...

        amount : 0.0000

        min_purchase: 0.0000

        applies_to

        restricted_to: []

        shipping_methods : null

        ...

        ```'
      operationId: getAllCoupons
      parameters:
      - description: Optional filter param. `/api/v2/coupons?id={value}`
        in: query
        name: id
        schema:
          type: string
      - description: Optional filter param `/api/v2/coupons?code={value}`
        in: query
        name: code
        schema:
          type: string
      - description: Optional filter param `/api/v2/coupons?name={value}`
        in: query
        name: name
        schema:
          type: string
      - description: '|Type|

          |-|

          |`per_item_discount`|

          |`percentage_discount`|

          |`per_total_discount`|

          |`shipping_discount`|

          |`free_shipping`|

          |`promotion`|'
        in: query
        name: type
        schema:
          type: string
      - description: Optional filter param `/api/v2/coupons?min_id={value}`
        in: query
        name: min_id
        schema:
          exclusiveMaximum: false
          exclusiveMinimum: false
          type: integer
      - description: Optional filter param`/api/v2/coupons?max_id={value}`
        in: query
        name: max_id
        schema:
          exclusiveMaximum: false
          exclusiveMinimum: false
          type: integer
      - description: Number of pages `/api/v2/coupons?page={number}`
        in: query
        name: page
        schema:
          exclusiveMaximum: false
          exclusiveMinimum: false
          type: number
      - description: Count per page `/api/v2/coupons?limit={count}`
        in: query
        name: limit
        schema:
          exclusiveMaximum: false
          exclusiveMinimum: false
          type: number
      - description: '|Type|

          |-|

          |`per_item_discount`|

          |`percentage_discount`|

          |`per_total_discount`|

          |`shipping_discount`|

          |`free_shipping`|

          |`promotion`|'
        in: query
        name: exclude_type
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example:
              - amount: '5.0000'
                applies_to:
                  entity: categories
                  ids:
                  - 0
                code: S2549JM0Y
                date_created: Tue, 13 Mar 2018 16:18:59 +0000
                enabled: true
                expires: ''
                id: 1
                max_uses: 0
                max_uses_per_customer: 0
                min_purchase: '0.0000'
                name: $5 off
                num_uses: 2
                restricted_to: {}
                shipping_methods: []
                type: per_total_discount
              - amount: '5.0000'
                applies_to:
                  entity: categories
                  ids:
                  - 0
                code: E3JC79S0I
                date_created: Tue, 12 Jun 2018 20:22:19 +0000
                enabled: true
                expires: ''
                id: 2
                max_uses: 25
                max_uses_per_customer: 0
                min_purchase: '25.0000'
                name: Limit by Location
                num_uses: 0
                restricted_to:
                  countries: AU
                shipping_methods:
                - shipping_endicia
                type: per_total_discount
              schema:
                items:
                  $ref: '#/components/schemas/coupon_Full'
                type: array
          description: ''
      summary: Get All Coupons
      tags:
      - Coupons
    parameters:
    - $ref: '#/components/parameters/Accept'
    post:
      description: 'Creates a *Coupon*.


        **Required Fields**

        *   `name`

        *   `code`

        *   `type`

        *   `amount`

        *   `applies_to`


        **Read Only Fields**

        *   `id`

        *   `num_uses`


        **Notes**


        The coupon type can be one of the following:


        *   `per_item_discount`

        *   `per_total_discount`

        *   `shipping_discount`

        *   `free_shipping`

        *   `percentage_discount`


        Legacy coupon codes only work with the store''s default currency. Applying
        a coupon with any other currency other than the store''s default will result
        in the error: "Coupons only apply to default currency."'
      operationId: createANewCoupon
      parameters:
      - $ref: '#/components/parameters/ContentType'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/coupon_Base'
        required: true
      responses:
        '201':
          content:
            application/json:
              example:
                amount: '5.0000'
                applies_to:
                  entity: categories
                  ids:
                  - 0
                code: S2549JM0Y
                date_created: Tue, 13 Mar 2018 16:18:59 +0000
                enabled: true
                expires: ''
                id: 1
                max_uses: 0
                max_uses_per_customer: 0
                min_purchase: '0.0000'
                name: $5 off
                num_uses: 2
                restricted_to: {}
                shipping_methods: []
                type: per_total_discount
              schema:
                $ref: '#/components/schemas/coupon_Full'
          description: ''
      summary: Create a New Coupon
      tags:
      - Coupons
      x-codegen-request-body-name: body
  /coupons/count:
    get:
      description: Returns a count of all *Coupons* in the store.
      operationId: getACountOfCoupons
      responses:
        '200':
          content:
            application/json:
              example:
                count: 27
              schema:
                properties:
                  count:
                    minimum: 0
                    type: integer
                type: object
          description: ''
      summary: Get a Count of Coupons
      tags:
      - Coupons
    parameters:
    - $ref: '#/components/parameters/Accept'
  /coupons/{id}:
    delete:
      description: Deletes a *Coupon*.
      operationId: deleteACoupon
      responses:
        '204':
          content: {}
          description: ''
      summary: Delete a Coupon
      tags:
      - Coupons
    parameters:
    - $ref: '#/components/parameters/Accept'
    - description: ID of the coupon.
      in: path
      name: id
      required: true
      schema:
        exclusiveMaximum: false
        exclusiveMinimum: false
        type: number
    put:
      description: 'Updates a *Coupon*.



        **Read Only Fields**


        * `id`

        * `num_uses`

        * `date_created`


        **Notes**


        If the `applies_to` value is cleared, you can restore it to the coupon by
        reapplying the `applies_to` value in a new `PUT` request.'
      operationId: updateACoupon
      parameters:
      - $ref: '#/components/parameters/ContentType'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/coupon_Base'
        required: true
      responses:
        '200':
          content:
            application/json:
              example:
                amount: '5.0000'
                applies_to:
                  entity: categories
                  ids:
                  - 0
                code: S2549JM0Y
                date_created: Tue, 13 Mar 2018 16:18:59 +0000
                enabled: true
                expires: ''
                id: 1
                max_uses: 0
                max_uses_per_customer: 0
                min_purchase: '0.0000'
                name: $5 off
                num_uses: 2
                restricted_to: {}
                shipping_methods: []
                type: per_total_discount
              schema:
                $ref: '#/components/schemas/coupon_Full'
          description: ''
      summary: Update a Coupon
      tags:
      - Coupons
      x-codegen-request-body-name: body
  /currencies:
    delete:
      description: Deletes all non-default store currencies.
      operationId: deleteAllCurrencies
      responses:
        '204':
          content:
            application/json:
              schema:
                type: object
          description: ''
      summary: Delete All Currencies
      tags:
      - Currencies (Bulk)
    get:
      description: Returns a list of all store *Currency*.
      operationId: getAllCurrencies
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/currency_Full'
                type: array
          description: ''
      summary: Get All Currencies
      tags:
      - Currencies (Bulk)
    parameters:
    - $ref: '#/components/parameters/Accept'
    post:
      description: "Creates *Currency*.\n\n**Required Fields** \n\n* name\n* currency_code\n\
        * currency_exchange_rate\n* token_location\n* token\n* decimal_token\n* thousands_token\n\
        * decimal_places\n\n**Read-Only Fields**\n* id\n* date_created\n* date_modified\n\
        \n\nThe `is_default` property can only be set to true. The value of `is_default`\
        \ cannot be unset, only overridden. To change the storeʼs default currency\
        \ in the BigCommerce control panel, please see [Managing Currencies](https://support.bigcommerce.com/articles/Public/Managing-Currencies/?q=currency&l=en_US&fs=Search&pn=1#default)."
      operationId: createACurrency
      parameters:
      - $ref: '#/components/parameters/ContentType'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/currency_Post'
        required: false
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/currency_Full'
          description: ''
      summary: Create a Currency
      tags:
      - Currencies (Bulk)
  /currencies/{id}:
    delete:
      description: 'Deletes a *Currency*.


        If a currencyʼs `is_default` property is set to true, this currency cannot
        be deleted. '
      operationId: deleteACurrency
      responses:
        '204':
          content:
            application/json:
              schema:
                type: object
          description: ''
      summary: Delete a Currency
      tags:
      - Currencies (Single)
    get:
      description: Returns a single *Currency*.
      operationId: getACurrency
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/currency_Full'
          description: ''
      summary: Get a Currency
      tags:
      - Currencies (Single)
    parameters:
    - $ref: '#/components/parameters/Accept'
    - description: Currency ID
      in: path
      name: id
      required: true
      schema:
        type: string
    put:
      description: 'Updates a *Currency*.


        **Read-Only Fields**


        * id

        * date_created

        * date_modified

        * currency_code



        The `is_default` property can only be set to true. The value of `is_default`
        cannot be unset, only overridden. '
      operationId: updateACurrency
      parameters:
      - $ref: '#/components/parameters/ContentType'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/currency_Put'
        required: false
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/currency_Full'
          description: ''
      summary: Update a Currency
      tags:
      - Currencies (Single)
      x-codegen-request-body-name: body
  /customer_groups:
    delete:
      description: "By default, it deletes all *Customer Groups*. \nAll existing customers\
        \ are unassigned from the group when it is deleted."
      operationId: deleteAllCustomerGroups
      responses:
        '204':
          content: {}
          description: ''
      summary: Delete Customer Groups
      tags:
      - Customer Groups
    get:
      description: Returns a list of *Customer Groups*. Default sorting is by customer-group
        id, from lowest to highest.
      operationId: getAllCustomerGroups
      parameters:
      - description: Number of pages
        in: query
        name: page
        schema:
          exclusiveMaximum: false
          exclusiveMinimum: false
          type: number
      - description: Count per page
        in: query
        name: limit
        schema:
          exclusiveMaximum: false
          exclusiveMinimum: false
          type: number
      - description: Filter customer groups by exact name match. Can use `name:like`
          to filter using a fuzzy matching method. This is good for implementing search.
        in: query
        name: name
        schema:
          type: string
      - description: Whether customers who sign up are added to this group by default.
        in: query
        name: is_default
        schema:
          type: boolean
      - description: If the groups is for guests. There can only be one customer group
          for guests at a time.
        in: query
        name: is_group_for_guests
        schema:
          type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/customerGroup_Full'
                type: array
          description: ''
      summary: Get All Customer Groups
      tags:
      - Customer Groups
    parameters:
    - $ref: '#/components/parameters/Accept'
    post:
      description: "Creates a *Customer Group*. \n**Required Fields**\n* name"
      operationId: createACustomerGroup
      parameters:
      - $ref: '#/components/parameters/ContentType'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/customerGroup_Post'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customerGroup_Full'
          description: ''
        '207':
          content:
            application/json:
              schema:
                description: ''
                properties:
                  message:
                    minLength: 1
                    type: string
                  status:
                    type: number
                type: object
          description: The customer group was created, but the sitewide discount update
            failed. You may retry the request.
      summary: Create a Customer Group
      tags:
      - Customer Groups
  /customer_groups/count:
    get:
      description: 'Returns a count of all *Customer Groups*. '
      operationId: getACountOfCustomerGroups
      responses:
        '200':
          content:
            application/json:
              example:
                count: 27
              schema:
                $ref: '#/components/schemas/count_Full'
          description: ''
      summary: Get a Count of Customer Groups
      tags:
      - Customer Groups
    parameters:
    - $ref: '#/components/parameters/Accept'
  /customer_groups/{customer_group_id}:
    delete:
      description: "Deletes a *Customer Group*. \n**Notes**\nAll existing customers\
        \ are unassigned from the group when it is deleted."
      operationId: deleteACustomerGroup
      responses:
        '204':
          content: {}
          description: ''
      summary: Delete a Customer Group
      tags:
      - Customer Groups
    get:
      description: Returns a *Customer Group*.
      operationId: getACustomerGroup
      parameters:
      - description: Number of pages
        in: query
        name: page
        schema:
          exclusiveMaximum: false
          exclusiveMinimum: false
          type: number
      - description: Count per page
        in: query
        name: limit
        schema:
          exclusiveMaximum: false
          exclusiveMinimum: false
          type: number
      - description: Name of the customer groups
        in: query
        name: name
        schema:
          type: string
      - description: Whether customers who sign up are added to this group by default.
        in: query
        name: is_default
        schema:
          type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customerGroup_Full'
          description: ''
      summary: Get a Customer Group
      tags:
      - Customer Groups
    parameters:
    - $ref: '#/components/parameters/Accept'
    - $ref: '#/components/parameters/customer_group_id'
    put:
      description: 'Updates a *Customer Group*.


        **Notes**


        Any combination of fields can be updated at once. Discount rules are treated
        in bulk. The entire set of rules is overwritten when a request is sent.'
      operationId: updateACustomerGroup
      parameters:
      - $ref: '#/components/parameters/ContentType'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/customerGroup_Full'
        required: false
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customerGroup_Full'
          description: ''
        '207':
          content:
            application/json:
              schema:
                description: ''
                properties:
                  message:
                    minLength: 1
                    type: string
                  status:
                    type: number
                required:
                - message
                - status
                type: object
          description: The customer group was updated, but the sitewide discount update
            failed. You may retry the request.
      summary: Update a Customer Group
      tags:
      - Customer Groups
      x-codegen-request-body-name: body
  /customers:
    delete:
      deprecated: true
      description: 'By default, it deletes all *Customers*. Up to 100 customers per
        batch can be deleted. '
      operationId: deleteAllCustomers
      responses:
        '204':
          content: {}
          description: ''
      summary: Delete Customers
      tags:
      - Customers
      x-operation-settings:
        AllowDynamicFormParameters: false
        AllowDynamicQueryParameters: false
        CollectParameters: false
        IsMultiContentStreaming: false
      x-unitTests:
      - expectedResponse:
          headers:
            Content-Type: application/json
          x-allowExtraHeaders: true
          x-arrayCheckCount: false
          x-arrayOrderedMatching: false
          x-bodyMatchMode: NONE
          x-matchResponseSchema: true
        request:
          headers:
            Accept: application/json
            Content-Type: application/json
            X-Auth-Token: Your Token
          method: DELETE
          uri: /customers
        x-testDescription: Deletes all customers
        x-testEnabled: true
        x-testName: Delete All Customers1
        x-testShouldPass: true
    get:
      deprecated: true
      description: Returns a list of all *Customers*. Default sorting is by customer
        id, from lowest to highest. Optional parameters can be passed in.
      operationId: getAllCustomers
      parameters:
      - in: query
        name: first_name
        schema:
          type: string
      - in: query
        name: last_name
        schema:
          type: string
      - in: query
        name: company
        schema:
          type: string
      - in: query
        name: email
        schema:
          type: string
      - in: query
        name: phone
        schema:
          type: string
      - in: query
        name: store_credit
        schema:
          type: string
      - in: query
        name: customer_group_id
        schema:
          type: integer
      - in: query
        name: min_id
        schema:
          type: integer
      - in: query
        name: max_id
        schema:
          type: integer
      - in: query
        name: min_date_created
        schema:
          type: string
      - in: query
        name: max_date_created
        schema:
          type: string
      - in: query
        name: min_date_modified
        schema:
          type: string
      - in: query
        name: max_date_modified
        schema:
          type: string
      - in: query
        name: tax_exempt_category
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/customer_Full'
                type: array
          description: ''
      summary: Get All Customers
      tags:
      - Customers
    parameters:
    - $ref: '#/components/parameters/Accept'
    post:
      deprecated: true
      description: "Creates a *Customer*.\n**Required Fields**\n*   `first_name`\n\
        *   `last_name`\n*   `email`\n**Read Only Fields**\n*   `id`\n*   `date_created`\n\
        *   `date_modified`\n*   `accepts_marketing`\n*   `addresses`\n*   `form_fields`\n\
        ## Notes \nThe `_authentication` object exposes functionality associated with\
        \ the customer’s ability to log in to the store. All properties of the `_authentication`\
        \ object are optional.\nWhen the `_authentication` object is not supplied\
        \ with an update request, then the existing customer password remains the\
        \ same.\n## Updating Passwords \nTo manually update a customer password in\
        \ the same way as the control panel, supply a value for the password field:\n\
        ```json\n{\n    \"_authentication\": {\n        \"password\": \"12w69Y217PYR96J\"\
        \n    }\n}\n```\n## Confirming Passwords \nAn additional optional `password_confirmation`\
        \ field can also be sent, providing password confirmation as a service:\n\
        ```json\n{\n    \"_authentication\": {\n       \"password\": \"12w69Y217PYR96J\"\
        ,\n       \"password_confirmation\": \"12w69Y217PYR96J\"\n    }\n}\n```\n\
        ## Forcing Password Resets \nTo force a customer to reset their password upon\
        \ their next login attempt, give the `force_reset` field a value of true,\
        \ as shown here:\n```json\n{\n    \"_authentication\": {\n        \"force_reset\"\
        : true\n    }\n}"
      operationId: createANewCustomer
      parameters:
      - $ref: '#/components/parameters/ContentType'
      requestBody:
        content:
          application/json:
            schema:
              properties:
                _authentication:
                  description: This can vary depending on the action being taken to
                    update, validate or force a password change. See Update Customer
                  properties: {}
                  type: object
                company:
                  type: string
                customer_group_id:
                  type: integer
                date_modified:
                  type: string
                first_name:
                  type: string
                last_name:
                  type: string
                notes:
                  type: string
                phone:
                  type: string
                registration_ip_address:
                  type: string
                store_credit:
                  type: integer
                tax_exempt_category:
                  type: string
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customer_Full'
          description: ''
      summary: Create a New Customer
      tags:
      - Customers
  /customers/count:
    get:
      deprecated: true
      description: 'Returns a count of all *Customers*. '
      operationId: getACountOfCustomers
      responses:
        '200':
          content:
            application/json:
              example:
                count: 27
              schema:
                $ref: '#/components/schemas/count_Full'
          description: ''
      summary: Get a Count of Customers
      tags:
      - Customers
      x-operation-settings:
        AllowDynamicFormParameters: false
        AllowDynamicQueryParameters: false
        CollectParameters: false
        IsMultiContentStreaming: false
      x-unitTests:
      - expectedResponse:
          body: '{  "count": 27}'
          headers:
            Content-Type: application/json
          x-allowExtraHeaders: true
          x-arrayCheckCount: false
          x-arrayOrderedMatching: false
          x-bodyMatchMode: RAW
          x-matchResponseSchema: true
        request:
          headers:
            Accept: application/json
            Content-Type: application/json
            X-Auth-Token: Your Token
          method: GET
          uri: /customers/count
        x-testDescription: Gets a count of the total number of customers in the store.
        x-testEnabled: true
        x-testName: Get a Count of Customers1
        x-testShouldPass: true
    parameters:
    - $ref: '#/components/parameters/Accept'
  /customers/{customer_id}:
    delete:
      deprecated: true
      description: Deletes a *Customer*.
      operationId: deleteACustomer
      responses:
        '204':
          content: {}
          description: ''
      summary: Delete a Customer
      tags:
      - Customers
    get:
      deprecated: true
      description: Returns a single *Customer*.
      operationId: getACustomer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customer_Full'
          description: ''
      summary: Get a Customer
      tags:
      - Customers
    parameters:
    - $ref: '#/components/parameters/Accept'
    - $ref: '#/components/parameters/customer_id'
    put:
      deprecated: true
      description: "Updates a *Customer*.\n**Read Only Fields**\n*   id\n*   date_created\n\
        *   date_modified\n*   accepts_marketing\n*   addresses\n*   form_fields\n\
        ## Notes \nThe `_authentication` object exposes functionality associated with\
        \ the customer’s ability to log in to the store. All properties of the `_authentication`\
        \ object are optional.\nWhen the `_authentication` object is not supplied\
        \ with an update request, then the existing customer password remains the\
        \ same.\n## Updating Passwords \nTo manually update a customer password in\
        \ the same way as the control panel, supply a value for the `password` field:\n\
        ```\n{\n    \"_authentication\": {\n        \"password\": \"12w69Y217PYR96J\"\
        \n    }\n}\n```\n#### Confirming Passwords \nAn additional optional `password_confirmation`\
        \ field can also be sent, providing password confirmation as a service:\n\
        ```\n{\n    \"_authentication\": {\n       \"password\": \"12w69Y217PYR96J\"\
        \n       \"password_confirmation\": \"12w69Y217PYR96J\"\n    }\n}\n```\n####\
        \ Forcing Password Resets \nTo force a customer to reset their password upon\
        \ their next login attempt, give the `force_reset` field a value of true,\
        \ as shown here:\n```\n{\n    \"_authentication\": {\n        \"force_reset\"\
        : true\n    }\n}\n```"
      operationId: updateACustomer
      parameters:
      - $ref: '#/components/parameters/ContentType'
      requestBody:
        content:
          application/json:
            schema:
              properties:
                _authentication:
                  description: Not returned in any responses, but accepts up to two
                    fields allowing you to set the customer’s password. If a password
                    is not supplied, it is generated automatically. For further information
                    about using this object, please see the Customers resource documentation.
                  properties:
                    force_reset:
                      type: boolean
                    password:
                      type: string
                    password_confirmation:
                      type: string
                  type: object
                accepts_marketing:
                  description: 'If the customer accepts product review emails or abandon
                    cart emails. Read-Only. '
                  example: true
                  readOnly: true
                  type: boolean
                addresses:
                  properties:
                    resource:
                      description: Resource being accessed.
                      example: /customers/5/addresses
                      type: string
                    url:
                      description: Full URL of where the resource is located.
                      example: https://api.bigcommerce.com/stores/{store_hash}/v2/customers/5/addresses
                      type: string
                  title: Address Field Resource
                  type: object
                company:
                  description: The name of the company for which the customer works.
                  example: BigCommerce
                  type: string
                customer_group_id:
                  description: The group to which the customer belongs.
                  example: 2
                  type: integer
                date_created:
                  description: Date on which the customer registered from the storefront
                    or was created in the control panel. This is a READ-ONLY field;
                    do not set or modify its value in a POST or PUT request.
                  type: string
                date_modified:
                  description: 'Date on which the customer updated their details in
                    the storefront or was updated in the control panel. This is a
                    READ-ONLY field; do not set or modify its value in a POST or PUT
                    request.

                    '
                  type: string
                email:
                  description: Email address of the customer.
                  example: janedoe@example.com
                  type: string
                first_name:
                  description: First name of the customer.
                  example: Jane
                  type: string
                form_fields:
                  description: Array of custom fields. This is a READ-ONLY field;
                    do not set or modify its value in a POST or PUT request.
                  items:
                    properties:
                      name:
                        description: Name of the form field
                        example: License Id
                        type: string
                      value:
                        description: Value of the form field
                        example: 123BAF
                        type: string
                    title: Form Fields
                    type: object
                  type: array
                id:
                  description: Unique numeric ID of this customer. This is a READ-ONLY
                    field; do not set or modify its value in a POST or PUT request.
                  example: 1
                  type: integer
                last_name:
                  description: Last name of the customer.
                  example: Doe
                  type: string
                notes:
                  description: Store-owner notes on the customer.
                  type: string
                phone:
                  description: Phone number of the customer.
                  example: '1234567890'
                  type: string
                registration_ip_address:
                  description: The customer’s IP address when they signed up.
                  example: 12.345.678.910
                  type: string
                reset_pass_on_login:
                  description: Force a password change on next login.
                  example: false
                  type: boolean
                store_credit:
                  description: The amount of credit the customer has. (Float, Float
                    as String, Integer)
                  example: '0'
                  type: string
                tax_exempt_category:
                  description: 'If applicable, the tax-exempt category of the shopper’s
                    customer account. You can apply a tax-exempt category to multiple
                    customers. This code should match the exemption codes provided
                    by the third-party integration. '
                  type: string
              required:
              - email
              - first_name
              - last_name
              title: Customers
              type: object
        required: false
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customer_Base'
          description: ''
      summary: Update a Customer
      tags:
      - Customers
      x-codegen-request-body-name: body
  /customers/{customer_id}/addresses:
    delete:
      deprecated: true
      description: By default, it deletes all *Customer Addresses*.
      operationId: deleteAllCustomerAddresses
      parameters:
      - description: Number of pages
        in: query
        name: page
        schema:
          exclusiveMaximum: false
          exclusiveMinimum: false
          type: number
      - description: Count per page
        in: query
        name: limit
        schema:
          exclusiveMaximum: false
          exclusiveMinimum: false
          type: number
      responses:
        '204':
          content: {}
          description: ''
      summary: Delete Customer Address
      tags:
      - Customer Addresses
    get:
      deprecated: true
      description: "Returns a list of *Customer Addresses*. Returns the addresses\
        \ belonging to a customer. Default sorting is by address id, from lowest to\
        \ highest. \nThe maximum limit is 250. If a limit isn’t provided, up to 50\
        \ `customer_addresses` are returned by default."
      operationId: getAllCustomerAddresses
      parameters:
      - description: Number of pages
        in: query
        name: page
        schema:
          exclusiveMaximum: false
          exclusiveMinimum: false
          type: number
      - description: Count per page
        in: query
        name: limit
        schema:
          exclusiveMaximum: false
          exclusiveMinimum: false
          type: number
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/customerAddress_Full'
                type: array
          description: ''
      summary: Get All Customer Addresses
      tags:
      - Customer Addresses
    parameters:
    - $ref: '#/components/parameters/Accept'
    - $ref: '#/components/parameters/customer_id'
    post:
      deprecated: true
      description: 'Creates a new *Customer Address*. (Note: The “state” property
        cannot be null. As a workaround for addresses that include no state/province
        string, pass a space as the “state” value.)


        **Required Fields**

        *   first_name

        *   last_name

        *   phone

        *   street_1

        *   city

        *   state

        *   zip

        *   country


        **Read Only Fields**

        *   id

        *   country_iso2'
      operationId: createACustomerAddress
      parameters:
      - $ref: '#/components/parameters/ContentType'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/customerAddress_Base'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customerAddress_Full'
          description: ''
      summary: Create a Customer Address
      tags:
      - Customer Addresses
  /customers/{customer_id}/addresses/count:
    get:
      deprecated: true
      description: Returns a count of addresses for a customer.
      operationId: getACountofCustomerAddresses
      parameters:
      - description: Number of pages
        in: query
        name: page
        schema:
          exclusiveMaximum: false
          exclusiveMinimum: false
          type: number
      - description: Count per page
        in: query
        name: limit
        schema:
          exclusiveMaximum: false
          exclusiveMinimum: false
          type: number
      responses:
        '200':
          content:
            application/json:
              example:
                count: 27
              schema:
                $ref: '#/components/schemas/count_Full'
          description: ''
      summary: Get a Count of Customer Addresses
      tags:
      - Customer Addresses
    parameters:
    - $ref: '#/components/parameters/Accept'
    - $ref: '#/components/parameters/customer_id'
  /customers/{customer_id}/addresses/{customer_address_id}:
    delete:
      deprecated: true
      description: Deletes a *Customer Address*.
      operationId: deletesACustomerAddress
      responses:
        '204':
          content: {}
          description: ''
      summary: Delete a Customer Address
      tags:
      - Customer Addresses
    get:
      deprecated: true
      description: Returns a *Customer Address*.
      operationId: getACustomerAddress
      parameters:
      - description: Number of pages
        in: query
        name: page
        schema:
          exclusiveMaximum: false
          exclusiveMinimum: false
          type: number
      - description: Count per page
        in: query
        name: limit
        schema:
          exclusiveMaximum: false
          exclusiveMinimum: false
          type: number
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customerAddress_Full'
          description: ''
      summary: Get a Customer Address
      tags:
      - Customer Addresses
    parameters:
    - $ref: '#/components/parameters/Accept'
    - $ref: '#/components/parameters/customer_id'
    - $ref: '#/components/parameters/customer_address_id'
    put:
      deprecated: true
      description: "Updates a *Customer Address*. \n**Read Only Fields**\n*   id\n\
        *   country_iso2"
      operationId: updateACustomerAddress
      parameters:
      - $ref: '#/components/parameters/ContentType'
      requestBody:
        content:
          application/json:
            schema:
              example:
                address_type: residential
                city: Austin
                company: BigCommerce
                country: United States
                country_iso2: US
                customer_id: 5
                first_name: Jane
                id: 3
                last_name: Doe
                phone: 123-345-7890
                state: Texas
                street_1: 123 Main Street
                street_2: ''
                zip: '78726'
              properties:
                address_type:
                  enum:
                  - residential
                  - commercial
                  example: residential
                  type: string
                city:
                  description: The customer’s city/town/suburb.
                  example: Austin
                  type: string
                company:
                  description: The customer’s company name.
                  example: BigCommerce
                  type: string
                country:
                  description: The customer’s country. Must be the full country name.
                  example: United States
                  type: string
                country_iso2:
                  description: 2-letter ISO Alpha-2 code for the customer’s country.
                    READ-ONLY
                  example: US
                  type: string
                customer_id:
                  description: ID of the associated customer.
                  example: 5
                  type: integer
                first_name:
                  description: The customer’s first name.
                  example: Jane
                  type: string
                id:
                  description: ID of this customer address. READ-ONLY
                  example: 3
                  type: integer
                last_name:
                  description: The customer’s last name.
                  example: Doe
                  type: string
                phone:
                  description: The customer’s phone number.
                  example: 123-345-7890
                  type: string
                state:
                  description: 'The customer’s state/province. Do not abbreviate the
                    state; spell out the entire word, e.g.: California. (Cannot be
                    null. As a workaround for addresses that include no state/province
                    string, pass a space as the “state” value.)'
                  example: Texas
                  type: string
                street_1:
                  description: The customer’s street address, line 1.
                  example: 123 Main Street
                  type: string
                street_2:
                  description: The customer’s street address, line 2.
                  type: string
                zip:
                  description: The customer’s ZIP or postal code.
                  example: '78726'
                  type: string
              required:
              - city
              - country
              - first_name
              - last_name
              - phone
              - state
              - street_1
              - zip
              title: Customer Address
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customerAddress_Full'
          description: ''
      summary: Update a Customer Address
      tags:
      - Customer Addresses
      x-codegen-request-body-name: body
  /customers/{customer_id}/validate:
    parameters:
    - $ref: '#/components/parameters/Accept'
    - $ref: '#/components/parameters/customer_id'
    post:
      deprecated: true
      description: "**This endpoint has special rate limiting protections to protect\
        \ against abuse.**\n\nProvided a password, will return a true/false response\
        \ indicating if the provided password matches the customer’s current password.\
        \ This endpoint is useful if you want to power the login of another system\
        \ using BigCommerce’s stored customer accounts, or as a safe way to migrate\
        \ passwords to another system (by checking them against BigCommerce’s password,\
        \ and if correct, storing it in another system securely.)If the password matches\
        \ what’s stored against the customer account, the response will be:\n\n```json\n\
        {\n    \"success\": \"true\"\n}\n```\nIf the password does NOT match, the\
        \ response will instead be:\n\n```json\n{\n    \"success\": \"false\"\n}\n\
        ```"
      operationId: validateCustomerPassword
      parameters:
      - $ref: '#/components/parameters/ContentType'
      requestBody:
        content:
          application/json:
            schema:
              properties:
                password:
                  description: String to run against customer password. Will return
                    a true or false.
                  type: string
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              example:
                success: false
              schema:
                $ref: '#/components/schemas/validatePassword'
          description: ''
      summary: Validate a Password
      tags:
      - Customer Passwords
      x-codegen-request-body-name: body
  /gift_certificates:
    delete:
      description: By default, it deletes all *Gift Certificates*.
      operationId: deleteAllGiftCertificates
      responses:
        '204':
          content:
            application/json:
              schema:
                type: object
          description: ''
      summary: Delete All Gift Certificates
      tags:
      - Gift Certificates
    get:
      description: 'Returns a list of *Gift Certificates*. Optional filter parameters
        can be passed in.


        Default sorting is by gift-certificate id, from lowest to highest.


        The maximum limit is 250. If a limit isn’t provided, up to 50 gift_certificates
        are returned by default.'
      operationId: getAllGiftCertificates
      parameters:
      - in: query
        name: min_id
        schema:
          type: integer
      - in: query
        name: max_id
        schema:
          type: integer
      - in: query
        name: code
        schema:
          type: string
      - in: query
        name: order_id
        schema:
          type: integer
      - in: query
        name: to_name
        schema:
          type: string
      - in: query
        name: to_email
        schema:
          type: string
      - in: query
        name: from_name
        schema:
          type: string
      - in: query
        name: from_email
        schema:
          type: string
      - in: query
        name: page
        schema:
          type: number
      - in: query
        name: limit
        schema:
          type: number
      responses:
        '200':
          content:
            application/json:
              example:
              - amount: '1000.0000'
                balance: '500.0000'
                code: 10R-5E2-BO4-RWT
                customer_id: 0
                expiry_date: Mon, 2 Jan 2023 08:45:38 CST
                from_email: test1@test.com
                from_name: Noland
                id: 24
                order_id: 1281
                purchase_date: Tue, 20 Jan 1970 08:45:38 CST
                status: active
                template: Celebration
                to_email: test@test.com
                to_name: Alyss
              - amount: '700.0000'
                balance: '700.0000'
                code: 10R-6E3-AO4-RST
                customer_id: 0
                expiry_date: Mon, 2 Jan 2023 08:45:38 CST
                from_email: test1@test.com
                from_name: Noland
                id: 25
                order_id: 0
                purchase_date: Tue, 20 Jan 1970 08:45:38 CST
                status: active
                template: General
                to_email: test@test.com
                to_name: Alyss
              - amount: '50.0000'
                balance: '50.0000'
                code: 15R-6E3-AO4-RST
                customer_id: 0
                expiry_date: Mon, 2 Jan 2023 08:45:38 CST
                from_email: test15@test.com
                from_name: Somethingelse
                id: 27
                order_id: 0
                purchase_date: Tue, 20 Jan 1970 08:45:38 CST
                status: active
                template: Celebration
                to_email: test5@test.com
                to_name: Lyss
              schema:
                items:
                  $ref: '#/components/schemas/giftCertificate_Full'
                type: array
          description: ''
      summary: Get All Gift Certificates
      tags:
      - Gift Certificates
    parameters:
    - $ref: '#/components/parameters/Accept'
    post:
      description: 'Creates a *Gift Certificate*.



        **Required Fields**

        * to_name

        * to_email

        * from_name

        * from_email

        * amount


        **Read Only Fields**

        * id

        * order_id


        **Notes**


        When a gift certificate is created through the API, no email notification
        is triggered to the specified recipient.'
      operationId: createAGiftCertificate
      parameters:
      - $ref: '#/components/parameters/ContentType'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/giftCertificate_Post'
        required: false
      responses:
        '200':
          content:
            application/json:
              example:
                amount: '10'
                balance: '0'
                code: FFZ-5N4-C7M-S78
                customer_id: 5
                expiry_date: Mon, 2 Jan 2023 08:45:38 CST
                from_email: janedoe@example.com
                from_name: Jane Doe
                id: 1
                message: Happy Birthday!
                order_id: 116
                purchase_date: Tue, 20 Jan 1970 08:45:38 CST
                status: active
                template: Birthday
                to_email: johndoe@example.com
                to_name: John Doe
              schema:
                $ref: '#/components/schemas/giftCertificate_Full'
          description: ''
      summary: Create a Gift Certificate
      tags:
      - Gift Certificates
      x-codegen-request-body-name: body
  /gift_certificates/{id}:
    delete:
      description: Deletes a *Gift Certificate*.
      operationId: deleteAGiftCertificate
      responses:
        '204':
          content: {}
          description: ''
      summary: Delete a Gift Certificate
      tags:
      - Gift Certificates
    get:
      description: Returns a single *Gift Certificate*.
      operationId: getAGiftCertificate
      responses:
        '200':
          content:
            application/json:
              example:
                amount: '10'
                balance: '0'
                code: FFZ-5N4-C7M-S78
                customer_id: 5
                expiry_date: Mon, 2 Jan 2023 08:45:38 CST
                from_email: janedoe@example.com
                from_name: Jane Doe
                id: 1
                message: Happy Birthday!
                order_id: 116
                purchase_date: Tue, 20 Jan 1970 08:45:38 CST
                status: active
                template: Birthday
                to_email: johndoe@example.com
                to_name: John Doe
              schema:
                $ref: '#/components/schemas/giftCertificate_Full'
          description: ''
      summary: Get a Gift Certificate
      tags:
      - Gift Certificates
    parameters:
    - $ref: '#/components/parameters/Accept'
    - description: ID of the gift certificate.
      in: path
      name: id
      required: true
      schema:
        exclusiveMaximum: false
        exclusiveMinimum: false
        type: integer
    put:
      description: 'Updates a *Gift Certificate*.


        **Read Only Fields**

        * id

        * order_id'
      operationId: updateAGiftCertificate
      parameters:
      - $ref: '#/components/parameters/ContentType'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/giftCertificate_Put'
        required: false
      responses:
        '200':
          content:
            application/json:
              example:
                amount: '10'
                balance: '0'
                code: FFZ-5N4-C7M-S78
                customer_id: 5
                expiry_date: Mon, 2 Jan 2023 08:45:38 CST
                from_email: janedoe@example.com
                from_name: Jane Doe
                id: 1
                message: Happy Birthday!
                order_id: 116
                purchase_date: Tue, 20 Jan 1970 08:45:38 CST
                status: active
                template: Birthday
                to_email: johndoe@example.com
                to_name: John Doe
              schema:
                $ref: '#/components/schemas/giftCertificate_Full'
          description: ''
      summary: Update a Gift Certificate
      tags:
      - Gift Certificates
      x-codegen-request-body-name: body
  /order_statuses:
    get:
      description: 'Returns a Collection of All Order Statuses.


        **Order Status Descriptions:**

        |Status ID | Name  | Description |

        |--|--|--|

        | 0 | Incomplete  | An incomplete order happens when a shopper reached the
        payment page, but did not complete the transaction. |

        | 1 | Pending |Customer started the checkout process, but did not complete
        it. |

        | 2 | Shipped | Order has been shipped, but receipt has not been confirmed;
        seller has used the Ship Items action. |

        | 3 | Partially Shipped | Only some items in the order have been shipped,
        due to some products being pre-order only or other reasons. |

        | 4 | Refunded | Seller has used the Refund action. |

        | 5 | Cancelled | Seller has cancelled an order, due to a stock inconsistency
        or other reasons. |

        | 6 |Declined | Seller has marked the order as declined for lack of manual
        payment, or other reasons. |

        | 7 | Awaiting Payment | Customer has completed checkout process, but payment
        has yet to be confirmed. |

        | 8 | Awaiting Pickup | Order has been pulled, and is awaiting customer pickup
        from a seller-specified location. |

        | 9 | Awaiting Shipment | Order has been pulled and packaged, and is awaiting
        collection from a shipping provider. |

        | 10 | Completed | Client has paid for their digital product and their file(s)
        are available for download. |

        | 11 | Awaiting Fulfillment | Customer has completed the checkout process
        and payment has been confirmed. |

        | 12 | Manual Verification Required | Order is on hold while some aspect needs
        to be manually confirmed. |

        | 13 | Disputed | Customer has initiated a dispute resolution process for
        the PayPal transaction that paid for the order. |

        | 14 | Partially Refunded | Seller has partially refunded the order. |'
      operationId: getOrderStatus
      responses:
        '200':
          $ref: '#/components/responses/orderStatusCollection_Resp'
      summary: Get All Order Statuses
      tags:
      - Order Status
    parameters:
    - $ref: '#/components/parameters/Accept'
  /order_statuses/{status_id}:
    get:
      description: 'Returns a single order status.


        **Order Status Descriptions**

        |Status ID | Name  | Description |

        |:--|:--|:--|

        | 0 | Incomplete  | An incomplete order happens when a shopper reached the
        payment page, but did not complete the transaction. |

        | 1 | Pending |Customer started the checkout process, but did not complete
        it. |

        | 2 | Shipped | Order has been shipped, but receipt has not been confirmed;
        seller has used the Ship Items action. |

        | 3 | Partially Shipped | Only some items in the order have been shipped,
        due to some products being pre-order only or other reasons. |

        | 4 | Refunded | Seller has used the Refund action. |

        | 5 | Cancelled | Seller has cancelled an order, due to a stock inconsistency
        or other reasons. |

        | 6 |Declined | Seller has marked the order as declined for lack of manual
        payment, or other reasons. |

        | 7 | Awaiting Payment | Customer has completed checkout process, but payment
        has yet to be confirmed. |

        | 8 | Awaiting Pickup | Order has been pulled, and is awaiting customer pickup
        from a seller-specified location. |

        | 9 | Awaiting Shipment | Order has been pulled and packaged, and is awaiting
        collection from a shipping provider. |

        | 10 | Completed | Client has paid for their digital product and their file(s)
        are available for download. |

        | 11 | Awaiting Fulfillment | Customer has completed the checkout process
        and payment has been confirmed. |

        | 12 | Manual Verification Required | Order is on hold while some aspect needs
        to be manually confirmed. |

        | 13 | Disputed | Customer has initiated a dispute resolution process for
        the PayPal transaction that paid for the order. |

        | 14 | Partially Refunded | Seller has partially refunded the order. |'
      operationId: getAOrderStatus
      responses:
        '200':
          $ref: '#/components/responses/orderStatus_Resp'
      summary: Get a Single Order Status by ID
      tags:
      - Order Status
    parameters:
    - $ref: '#/components/parameters/Accept'
    - $ref: '#/components/parameters/status_id_path'
  /orders:
    delete:
      description: Archives all orders.
      operationId: deleteAllOrders
      responses:
        '204':
          description: ''
      summary: Delete All Orders
      tags:
      - Orders
    get:
      description: 'Gets a list of orders using the filter query.


        **Notes**


        The default sort is by order id, from lowest to highest.'
      operationId: getAllOrders
      parameters:
      - $ref: '#/components/parameters/min_id'
      - $ref: '#/components/parameters/max_id'
      - $ref: '#/components/parameters/min_total'
      - $ref: '#/components/parameters/max_total'
      - $ref: '#/components/parameters/customer_id'
      - $ref: '#/components/parameters/email'
      - $ref: '#/components/parameters/status_id'
      - $ref: '#/components/parameters/cart_id'
      - $ref: '#/components/parameters/payment_method'
      - $ref: '#/components/parameters/min_date_created'
      - $ref: '#/components/parameters/max_date_created'
      - $ref: '#/components/parameters/min_date_modified'
      - $ref: '#/components/parameters/max_date_modified'
      - $ref: '#/components/parameters/page'
      - $ref: '#/components/parameters/limit'
      - $ref: '#/components/parameters/sort'
      - $ref: '#/components/parameters/is_deleted'
      - $ref: '#/components/parameters/channel_id'
      responses:
        '200':
          $ref: '#/components/responses/orderCollection_Resp'
      summary: Get All Orders
      tags:
      - Orders
    parameters:
    - $ref: '#/components/parameters/Accept'
    post:
      description: 'Creates an *Order*. To learn more about creating or updating orders,
        see [Orders Overview](/api-docs/orders/orders-api-overview).


        Create an order with an existing catalog product or a custom product.


        **Required Fields**


        * `products` or `consignments`

        * `billing_address`


        When you create an order, the `consignment(s)` array allows you to create
        pickup consignments.

        - An order can have either a pickup or a shipping fulfillment method, but
        not both.

        - An order can have only one pickup consignment.


        Choose from one of the following:

        1. Create order with a shipping fulfillment method using `shipping_addresses`
        and `products`, i.e. legacy mode

        2. Create order with a pickup fulfillment method using `consignments`, i.e.
        Consignment mode


        You can fulfill an order with shipping or pickup, but not both.


        This means that if the `consignments` array is present in the request, then
        _none_ of the following may be present and vice-versa:

        - `shipping_addresses`

        - `products`'
      operationId: createAnOrder
      parameters:
      - $ref: '#/components/parameters/ContentType'
      requestBody:
        content:
          application/json:
            examples:
              Custom Product:
                value:
                  billing_address:
                    city: Austin
                    country: United States
                    country_iso2: US
                    email: janedoe@email.com
                    first_name: Jane
                    last_name: Doe
                    state: Texas
                    street_1: 123 Main Street
                    zip: '78751'
                  products:
                  - name: BigCommerce Coffee Mug
                    price_ex_tax: 45
                    price_inc_tax: 50
                    quantity: 1
              Multiple Products:
                value:
                  billing_address:
                    city: Austin
                    country: United States
                    country_iso2: US
                    email: janedoe@example.com
                    first_name: Jane
                    last_name: Doe
                    state: Texas
                    street_1: 123 Main Street
                    zip: '78751'
                  customer_id: 11
                  products:
                  - name: BigCommerce Poster
                    price_ex_tax: 10
                    price_inc_tax: 10.98
                    quantity: 1
                  - name: BigCommerce Coffee Mug
                    price_ex_tax: 45
                    price_inc_tax: 50
                    quantity: 1
                  - product_id: 184
                    product_options:
                    - id: 200
                      value: '180'
                    - id: 230
                      value: '192'
                  shipping_addresses:
                  - city: Austin
                    company: Acme Pty Ltd
                    country: United States
                    country_iso2: US
                    email: elsie@example.com
                    first_name: Trish
                    last_name: Test
                    state: Texas
                    street_1: 666 Sussex St
                    zip: '78751'
                  status_id: 0
              Product with Options:
                value:
                  billing_address:
                    city: Austin
                    country: United States
                    country_iso2: US
                    email: janedoe@example.com
                    first_name: Jane
                    last_name: Doe
                    state: Texas
                    street_1: 123 Main Street
                    zip: '78751'
                  customer_id: 11
                  products:
                  - product_id: 184
                    product_options:
                    - id: 200
                      value: '180'
                    - id: 230
                      value: '192'
                    quantity: 5
                  shipping_addresses:
                  - city: Austin
                    company: Acme Pty Ltd
                    country: United States
                    country_iso2: US
                    email: elsie@example.com
                    first_name: Trish
                    last_name: Test
                    state: Texas
                    street_1: 666 Sussex St
                    zip: '78751'
                  status_id: 0
              Product with a Drop Down and a Text Field Modifier:
                value:
                  billing_address:
                    city: Austin
                    country: United States
                    country_iso2: US
                    email: janedoe@example.com
                    first_name: Jane
                    last_name: Doe
                    state: Texas
                    street_1: 123 Main Street
                    zip: '78751'
                  customer_id: 11
                  products:
                  - product_id: 184
                    product_options:
                    - id: 200
                      value: '180'
                    - id: 230
                      value: Custom Message
                    quantity: 5
                  shipping_addresses:
                  - city: Austin
                    company: Acme Pty Ltd
                    country: United States
                    country_iso2: US
                    email: elsie@example.com
                    first_name: Trish
                    last_name: Test
                    state: Texas
                    street_1: 666 Sussex St
                    zip: '78751'
                  status_id: 0
            schema:
              $ref: '#/components/schemas/order_Post'
        required: true
      responses:
        '200':
          $ref: '#/components/responses/order_Resp'
      summary: Create an Order
      tags:
      - Orders
  /orders/count:
    get:
      description: Gets an array of orders in the store organized by order status.
      operationId: getCountOrder
      responses:
        '200':
          $ref: '#/components/responses/ordersCount_Resp'
      summary: Get a Count of Orders
      tags:
      - Orders
    parameters:
    - $ref: '#/components/parameters/Accept'
  /orders/{order_id}:
    delete:
      description: Archives an order. To remove a single product from an order, see
        `PUT /orders/{order_id}`.
      operationId: deleteAnOrder
      responses:
        '204':
          description: ''
      summary: Archive an Order
      tags:
      - Orders
    get:
      description: Gets an *Order*. To learn more about creating or updating orders,
        see [Orders Overview](/api-docs/orders/orders-api-overview).
      operationId: getAnOrder
      responses:
        '200':
          $ref: '#/components/responses/order_Resp'
        '404':
          content:
            application/json:
              schema: {}
          description: '"The requested resource was not found."'
      summary: Get an Order
      tags:
      - Orders
    parameters:
    - $ref: '#/components/parameters/Accept'
    - $ref: '#/components/parameters/order_id_path'
    put:
      description: "Updates an *Order*. \n\nTo add a product to an existing order,\
        \ don't include `id` in the body. Include `product_options` if adding a product\
        \ with variants.\n\nTo update a product in an order, include `id` in the body.\
        \ The body should only contain the fields that need to be updated. Those fields\
        \ that are omitted will not be changed.\n\nTo remove a product from an order,\
        \ set that product’s `quantity` to `0`.\n\nTo learn more about creating or\
        \ updating orders, see [Orders Overview](/api-docs/orders/orders-api-overview)."
      operationId: updateAnOrder
      parameters:
      - $ref: '#/components/parameters/ContentType'
      requestBody:
        content:
          application/json:
            examples:
              Adding a new product to order:
                value:
                  products:
                  - name: BigCommerce Coffee Mug
                    price_ex_tax: 10.12
                    price_inc_tax: 12.45
                    quantity: 1
                    sku: MUG-GRY
              Adding an existing product to order:
                value:
                  products:
                  - price_ex_tax: 10.12
                    price_inc_tax: 12.45
                    product_id: 123
                    product_options:
                      id: 56
                      value: 12
                    quantity: 5
              Removing a product from an order:
                value:
                  products:
                  - price_ex_tax: 10.12
                    price_inc_tax: 12.45
                    product_id: 123
                    product_options:
                      id: 56
                      value: 12
                    quantity: 0
              application/json:
                value:
                  billing_address:
                    city: Austin
                    country: United States
                    country_iso2: US
                    email: janedoe@example.com
                    first_name: Jane
                    last_name: Doe
                    state: Texas
                    street_1: 123 Main Street
                    zip: '78751'
                  customer_id: 11
                  customer_locale: en
                  products:
                  - name: BigCommerce Poster
                    price_ex_tax: 10
                    price_inc_tax: 10.98
                    quantity: 1
                  - name: BigCommerce Coffee Mug
                    price_ex_tax: 45
                    price_inc_tax: 50
                    quantity: 1
                  - product_id: 184
                    product_options:
                    - id: 200
                      value: '180'
                    - id: 230
                      value: '192'
                  shipping_addresses:
                  - city: Austin
                    company: Acme Pty Ltd
                    country: United States
                    country_iso2: US
                    email: elsie@example.com
                    first_name: Trish
                    last_name: Test
                    state: Texas
                    street_1: 666 Sussex St
                    zip: '78751'
                  status_id: 0
            schema:
              $ref: '#/components/schemas/order_Put'
        required: true
      responses:
        '200':
          $ref: '#/components/responses/order_Resp'
      summary: Update an Order
      tags:
      - Orders
  /orders/{order_id}/coupons:
    get:
      description: 'Lists all order coupons. Optional parameters can be passed in.


        |Type `int`|Type Name|

        |-|-|

        |`0`|`per_item_discount`|

        |`1`|`percentage_discount`|

        |`2`|`per_total_discount`|

        |`3`|`shipping_discount`|

        |`4`|`free_shipping`|

        |`5`|`promotion`|'
      operationId: getAllOrderCoupons
      parameters:
      - $ref: '#/components/parameters/page'
      - $ref: '#/components/parameters/limit'
      responses:
        '200':
          $ref: '#/components/responses/orderCouponsCollection_Resp'
      summary: List Order Coupons
      tags:
      - Order Coupons
    parameters:
    - $ref: '#/components/parameters/Accept'
    - $ref: '#/components/parameters/order_id_path'
  /orders/{order_id}/messages:
    get:
      description: Gets the messages associated with an order.
      operationId: getOrderMessages
      parameters:
      - $ref: '#/components/parameters/min_id'
      - $ref: '#/components/parameters/max_id'
      - $ref: '#/components/parameters/customer_id'
      - $ref: '#/components/parameters/min_date_created'
      - $ref: '#/components/parameters/max_date_created'
      - $ref: '#/components/parameters/is_flagged'
      - $ref: '#/components/parameters/status'
      - $ref: '#/components/parameters/page'
      - $ref: '#/components/parameters/limit'
      responses:
        '200':
          $ref: '#/components/responses/orderMessagesCollection_Resp'
      summary: Get Order Messages
      tags:
      - Order Messages
    parameters:
    - $ref: '#/components/parameters/Accept'
    - $ref: '#/components/parameters/order_id_path'
  /orders/{order_id}/products:
    get:
      description: Lists all order products on an order using `order_id`. By default,
        items sort from lowest to highest according to a newly created ID, separate
        from the `order_id` and the `product_id`.
      operationId: getAllOrderProducts
      parameters:
      - $ref: '#/components/parameters/page'
      - $ref: '#/components/parameters/limit'
      responses:
        '200':
          $ref: '#/components/responses/orderProductsCollection_Resp'
      summary: List Order Products
      tags:
      - Order Products
    parameters:
    - $ref: '#/components/parameters/Accept'
    - $ref: '#/components/parameters/order_id_path'
  /orders/{order_id}/products/{product_id}:
    get:
      description: Gets a product line item associated with the order.
      operationId: getAnOrderProduct
      responses:
        '200':
          $ref: '#/components/responses/orderProductLineItem_Resp'
      summary: Get an Order Product
      tags:
      - Order Products
    parameters:
    - $ref: '#/components/parameters/Accept'
    - $ref: '#/components/parameters/order_id_path'
    - $ref: '#/components/parameters/product_id_path'
  /orders/{order_id}/shipments:
    delete:
      description: Deletes all shipments associated with an order.
      operationId: deleteAllOrderShipments
      responses:
        '204':
          description: ''
      summary: Delete Order Shipments
      tags:
      - Order Shipments
    get:
      description: Gets a list of all shipments on an order.
      operationId: getAllOrderShipments
      parameters:
      - $ref: '#/components/parameters/page'
      - $ref: '#/components/parameters/limit'
      responses:
        '200':
          $ref: '#/components/responses/orderShipmentCollection_Resp'
      summary: Get Order Shipments
      tags:
      - Order Shipments
    parameters:
    - $ref: '#/components/parameters/Accept'
    - $ref: '#/components/parameters/order_id_path'
    post:
      description: 'Creates an *Order Shipment*. For more details, see [Shipping an
        Order](/api-docs/orders/orders-api-overview#creating-order-shipments).


        **Required Fields**

        *   order_address_id

        *   items


        **Usage notes**


        Presuming that a valid carrier code is used, a tracking link is generated
        if either `shipping_provider` or `tracking_carrier` is supplied alongside
        a tracking number. Providing only the tracking number will result in non-clickable
        text in the customer facing email.


        Acceptable values for `shipping_provider` include an empty string (`""`),
        auspost, canadapost, endicia, usps, fedex, royalmail, ups, upsready, upsonline,
        or shipperhq.


        Acceptable values for `tracking_carrier` include an empty string (`""`) or
        one of the valid [tracking-carrier values](https://github.com/bigcommerce/dev-docs/blob/master/assets/csv/tracking_carrier_values.csv).

        '
      operationId: createOrderShipments
      parameters:
      - $ref: '#/components/parameters/ContentType'
      requestBody:
        content:
          application/json:
            examples: {}
            schema:
              $ref: '#/components/schemas/orderShipment_Post'
        required: true
      responses:
        '201':
          $ref: '#/components/responses/orderShipment_Resp'
      summary: Create Order Shipment
      tags:
      - Order Shipments
  /orders/{order_id}/shipments/count:
    get:
      description: Gets a count of the number of shipments that have been made for
        a single order.
      operationId: getCountShipments
      responses:
        '200':
          $ref: '#/components/responses/orderCount_Resp'
      summary: Get Count of Order Shipments
      tags:
      - Order Shipments
    parameters:
    - $ref: '#/components/parameters/Accept'
    - $ref: '#/components/parameters/order_id_path'
  /orders/{order_id}/shipments/{shipment_id}:
    delete:
      description: Deletes a shipment associated with an order.
      operationId: deleteOrderShipment
      responses:
        '204':
          description: ''
      summary: Delete an Order Shipment
      tags:
      - Order Shipments
    get:
      description: 'Gets an order shipment. '
      operationId: getOrderShipment
      responses:
        '200':
          $ref: '#/components/responses/orderShipment_Resp'
      summary: Get a Shipment
      tags:
      - Order Shipments
    parameters:
    - $ref: '#/components/parameters/Accept'
    - $ref: '#/components/parameters/order_id_path'
    - $ref: '#/components/parameters/shipment_id_path'
    put:
      description: Updates an existing shipment associated with an order.
      operationId: updateOrderShipment
      parameters:
      - $ref: '#/components/parameters/ContentType'
      requestBody:
        content:
          application/json:
            examples:
              application/json:
                value:
                  items:
                  - order_product_id: 15
                    quantity: 2
                  order_address_id: 1
                  shipping_provider: ''
                  tracking_number: EJ958083578US
            schema:
              $ref: '#/components/schemas/orderShipment_Put'
        required: true
      responses:
        '200':
          $ref: '#/components/responses/orderShipment_Resp'
      summary: Update a Shipment
      tags:
      - Order Shipments
  /orders/{order_id}/shipping_addresses:
    get:
      description: 'Get all shipping addresses on an order using the `order_id`.


        Returned in the response is shipping_quotes object. Please use the Get Shipping
        Quotes Endpoint. Using the response will return a 204 for the shipping quote.'
      operationId: getAllShippingAddresses
      parameters:
      - $ref: '#/components/parameters/page'
      - $ref: '#/components/parameters/limit'
      responses:
        '200':
          $ref: '#/components/responses/orderShippingAddressCollection_Resp'
      summary: Get Order Shipping Addresses
      tags:
      - Order Shipping Addresses
    parameters:
    - $ref: '#/components/parameters/Accept'
    - $ref: '#/components/parameters/order_id_path'
  /orders/{order_id}/shipping_addresses/{id}:
    get:
      description: 'Gets a shipping address associated with an order.


        Returned in the response is shipping_quotes object. Please use the Get Shipping
        Quotes Endpoint. Using the response will return a 204 for the shipping quote.'
      operationId: getAShippingAddress
      responses:
        '200':
          $ref: '#/components/responses/orderShippingAddress_Resp'
      summary: Get a Shipping Address
      tags:
      - Order Shipping Addresses
    parameters:
    - $ref: '#/components/parameters/Accept'
    - $ref: '#/components/parameters/order_id_path'
    - description: Shipping address ID.
      in: path
      name: id
      required: true
      schema:
        type: string
    put:
      description: 'Update a shipping address associated with an order.


        **Note**: Updating a shipping address will NOT trigger the recalculation of
        shipping cost and tax'
      operationId: updateAShippingAddress
      parameters:
      - $ref: '#/components/parameters/ContentType'
      requestBody:
        content:
          application/json:
            examples:
              application/json:
                value:
                  city: Sydney
                  company: company
                  country: Australia
                  country_iso2: AU
                  email: email2@bigcommerce.com
                  first_name: first
                  last_name: last
                  phone: '468444123'
                  state: New South Wales
                  street_1: street 1
                  street_2: street 2
                  zip: '2000'
            schema:
              $ref: '#/components/schemas/shippingAddress_Put'
      responses:
        '200':
          content:
            application/json:
              examples:
                response:
                  value:
                    base_cost: '15.0000'
                    base_handling_cost: '0.0000'
                    city: Sydney
                    company: company
                    cost_ex_tax: '15.0000'
                    cost_inc_tax: '15.0000'
                    cost_tax: '0.0000'
                    cost_tax_class_id: 2
                    country: Australia
                    country_iso2: AU
                    email: email@bigcommerce.com
                    first_name: first
                    form_fields: []
                    handling_cost_ex_tax: '0.0000'
                    handling_cost_inc_tax: '0.0000'
                    handling_cost_tax: '0.0000'
                    handling_cost_tax_class_id: 2
                    id: 1
                    items_shipped: 0
                    items_total: 1
                    last_name: last
                    order_id: 100
                    phone: phone
                    shipping_method: Flat Rate
                    shipping_quotes:
                      resource: /orders/100/shipping_addresses/1/shipping_quotes
                      url: https://api-proxy.service.bcdev/stores/17hoqh4ddx/v2/orders/100/shipping_addresses/1/shipping_quotes
                    shipping_zone_id: 1
                    shipping_zone_name: United States
                    state: New South Wales
                    street_1: street 1
                    street_2: street 2
                    zip: '2000'
              schema:
                $ref: '#/components/schemas/orderShippingAddress'
          description: OK
        '400':
          content:
            application/json:
              examples:
                response:
                  value:
                  - message: The field 'item_total' cannot be written to. Please remove
                      it from your request before trying again.
                    status: 404
              schema:
                items:
                  properties:
                    message:
                      type: string
                    status:
                      type: integer
                  type: object
                type: array
          description: Bad Request
        '404':
          content:
            application/json:
              examples:
                response:
                  value:
                  - message: The requested resource was not found.
                    status: 404
              schema:
                items:
                  properties:
                    message:
                      type: string
                    status:
                      type: integer
                  type: object
                type: array
          description: Not Found
      summary: Update a Shipping Address
      tags:
      - Order Shipping Addresses
  /orders/{order_id}/shipping_addresses/{shipping_address_id}/shipping_quotes:
    get:
      description: 'Gets all shipping quotes persisted on an order.


        This is a read-only endpoint and the output can vary based on the shipping
        quote. A shipping quote can only be generated using the storefront at this
        time. Orders that are created in the control panel or using the API return
        a 204 for this endpoint since a shipping quote is not generated during that
        process.'
      operationId: getShippingQuotes
      responses:
        '200':
          $ref: '#/components/responses/shippingQuotes_Resp'
      summary: Get Order Shipping Quotes
      tags:
      - Order Shipping Addresses Quotes
    parameters:
    - $ref: '#/components/parameters/Accept'
    - $ref: '#/components/parameters/order_id_path'
    - $ref: '#/components/parameters/shipping_address_id_path'
  /orders/{order_id}/taxes:
    get:
      description: 'Gets all order taxes using `order_id`.

        Each tax applied to an order. This information can be useful for reporting
        purposes.

        Pass in the query parameter `?details=true` to return extra details about
        order taxes.

        `order_product_id` and `line_item_type` are also returned.


        All values are read-only.'
      operationId: getOrderTaxes
      parameters:
      - $ref: '#/components/parameters/page'
      - $ref: '#/components/parameters/limit'
      - description: To return detailed tax information, pass in the details query.
        in: query
        name: details
        schema:
          default: 'true'
          type: string
      responses:
        '200':
          $ref: '#/components/responses/orderTaxes_Resp'
      summary: Get All Order Taxes
      tags:
      - Order Taxes
    parameters:
    - $ref: '#/components/parameters/Accept'
    - $ref: '#/components/parameters/order_id_path'
  /pages:
    get:
      deprecated: true
      description: 'Returns a list of *Pages*. Default sorting is by auto-generated
        ID from oldest to newest.


        > #### Warning

        > **Deprecated**

        > * This API operation is deprecated. Avoid using this API operation if possible.
        It will be removed in a future version.

        > * To get one or more pages, use Pages V3ʼs [Get pages](/docs/rest-content/pages#get-pages)
        endpoint. To get a single page, use Pages V3ʼs [Get a page](/docs/rest-content/pages#get-a-page)
        endpoint.

        '
      operationId: getAllPages
      parameters:
      - description: Filter param.
        in: query
        name: page
        schema:
          exclusiveMaximum: false
          exclusiveMinimum: false
          type: number
      - description: Filter param.
        in: query
        name: limit
        schema:
          exclusiveMaximum: false
          exclusiveMinimum: false
          type: number
      responses:
        '200':
          content:
            Example:
              example:
              - body: We are happy to answer questions or help you with...
                contact_fields: fullname,companyname,phone,orderno,rma
                email: janedoes@example.com
                feed: ''
                has_mobile_version: false
                id: 6
                is_homepage: false
                is_visible: true
                layout_file: page.html
                link: ''
                meta_description: ''
                meta_keywords: ''
                meta_title: ''
                mobile_body: ''
                name: Contact Form
                parent_id: 5
                search_keywords: ''
                sort_order: 3
                type: page
                url: /contact-us/
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/page_Full'
                type: array
          description: ''
      summary: Get All Pages
      tags:
      - Pages
    parameters:
    - $ref: '#/components/parameters/Accept'
    post:
      deprecated: true
      description: 'Creates a *Page*. The request payload limit is 1MB.


        **Required Fields**

        *   `type`

        *   `name`

        *   `link` (for a page of `type: link`)

        *   `feed` (for a page of `type: rss_feed`)

        *   `body` (for a page of `type: raw`)


        **Read Only Fields**

        *   `id`


        ## Content Type


        The default value for `content_type` is `text/html`; however, if `page_type`
        is set to `raw`, `content_type` can be changed to `text/javascript` or `application/json`.
        Updating this field allows you to place a JavaScript or a JSON file in the
        root directory.


        > #### Warning

        > **Deprecated**

        > * This API operation is deprecated. Avoid using this API operation if possible.
        It will be removed in a future version.

        > * To create one or more pages, use Pages V3ʼs [Create pages](/docs/rest-content/pages#create-pages)
        endpoint. '
      operationId: createAPage
      parameters:
      - $ref: '#/components/parameters/ContentType'
      requestBody:
        content:
          application/json:
            examples:
              example-1:
                value:
                  body: <p>We're happy to answer questions or help you with returns.<br
                    />Please fill out the form below if you need assistance.</p>
                  contact_fields: fullname,companyname,phone,orderno,rma
                  content_type: text/html
                  email: janedoes@example.com
                  feed: string
                  has_mobile_version: false
                  is_homepage: false
                  is_visible: true
                  layout_file: page.html
                  link: string
                  meta_description: string
                  meta_keywords: string
                  meta_title: string
                  mobile_body: '0'
                  name: Contact Form
                  parent_id: 5
                  search_keywords: string
                  sort_order: 3
                  type: page
                  url: /contact-us/
            schema:
              $ref: '#/components/schemas/page_Base'
        required: true
      responses:
        '200':
          content:
            application/json:
              example:
                body: We're happy to answer questions or help you with returns.<br
                  />Please fill out the form below if you need assistance.
                contact_fields: fullname,companyname,phone,orderno,rma
                email: janedoes@example.com
                feed: ''
                has_mobile_version: false
                id: 6
                is_homepage: false
                is_visible: true
                layout_file: page.html
                link: ''
                meta_description: ''
                meta_keywords: ''
                meta_title: ''
                mobile_body: ''
                name: Contact Form
                parent_id: 5
                search_keywords: ''
                sort_order: 3
                type: page
                url: /contact-us/
              schema:
                $ref: '#/components/schemas/page_Full'
          description: ''
        '207':
          content:
            application/json:
              schema:
                type: object
          description: Multiple operations have taken place and the status for each
            operation can be viewed in the body of the response. Typically indicates
            that a partial failure has occurred, such as when a `POST` or `PUT` request
            is successful, but saving the URL has failed.
      summary: Create a Page
      tags:
      - Pages
      x-codegen-request-body-name: body
  /pages/{id}:
    delete:
      deprecated: true
      description: "Deletes a *Page*.\n\n> #### Warning\n> **Deprecated**\n> * This\
        \ API operation is deprecated. Avoid using this API operation if possible.\
        \ It will be removed in a future version.\n> * To delete multiple pages, use\
        \ Pages V3ʼs [Delete pages](/docs/rest-content/pages#delete-pages) endpoint.\
        \ To delete a single page, use Pages V3ʼs [Delete a page](/docs/rest-content/pages#delete-a-page)\
        \ endpoint. \n"
      operationId: deleteAPage
      responses:
        '204':
          content: {}
          description: ''
      summary: Delete a Page
      tags:
      - Pages
    get:
      deprecated: true
      description: "Returns a *Page*. \n\n> #### Warning\n> **Deprecated**\n> * This\
        \ API operation is deprecated. Avoid using this API operation if possible.\
        \ It will be removed in a future version.\n> * To get a single page, use Pages\
        \ V3ʼs [Get a page](/docs/rest-content/pages#get-a-page) endpoint.\n"
      operationId: getAPage
      responses:
        '200':
          content:
            application/json:
              example:
                body: '%%Syndicate%%'
                feed: ''
                has_mobile_version: false
                id: 1
                is_customers_only: false
                is_homepage: false
                is_visible: true
                layout_file: ''
                link: ''
                meta_description: ''
                meta_keywords: '0'
                meta_title: ''
                mobile_body: '0'
                name: RSS Syndication
                parent_id: 0
                search_keywords: '0'
                sort_order: 5
                type: page
                url: /rss-syndication/
              schema:
                $ref: '#/components/schemas/page_Full'
          description: ''
      summary: Get A Page
      tags:
      - Pages
    parameters:
    - $ref: '#/components/parameters/Accept'
    - description: ID of the page.
      in: path
      name: id
      required: true
      schema:
        exclusiveMaximum: false
        exclusiveMinimum: false
        type: integer
    put:
      deprecated: true
      description: 'Updates a *Page*. The request payload limit is 1MB.


        **Read Only Fields**

        * id


        > #### Warning

        > **Deprecated**

        > * This API operation is deprecated. Avoid using this API operation if possible.
        It will be removed in a future version.

        > * To update multiple pages, use Pages V3ʼs [Update pages](/docs/rest-content/pages#update-pages)
        endpoint. To update a single page, use Pages V3ʼs [Update a page](/docs/rest-content/pages#update-a-page)
        endpoint.'
      operationId: updateAPage
      parameters:
      - $ref: '#/components/parameters/ContentType'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/page_Base'
        required: false
      responses:
        '200':
          content:
            application/json:
              example:
                body: '<em>To edit this page simply login to the control panel, click
                  the <strong style=''font-weight: 400''>Website Content</strong>
                  tab and choose the </em> <strong style=''font-weight: 400''><em>View
                  Web Pages option. Click Edit next to the Shipping & Returns page
                  and you can change this text. A sample returns policy is shown below
                  which you can edit as needed.</em><em style=''font-style: normal''><br/><br/></em></strong><em
                  style=''font-style: normal''><strong>Returns Policy</strong></em><strong
                  style=''font-weight: 400''></em></em><em style=''font-style: normal''><br/><br/></em>You
                  may return most new, unopened items within 30 days of delivery for
                  a full refund. We''ll also pay the return shipping costs if the
                  return is a result of our error (you received an incorrect or defective
                  item, etc.).<br/><br/>You should expect to receive your refund within
                  four weeks of giving your package to the return shipper, however,
                  in many cases you will receive a refund more quickly. This time
                  period includes the transit time for us to receive your return from
                  the shipper (5 to 10 business days), the time it takes us to process
                  your return once we receive it (3 to 5 business days), and the time
                  it takes your bank to process our refund request (5 to 10 business
                  days).<br/><br/>If you need to return an item, please <a href=''/contact-us/''>Contact
                  Us</a> with your order number and details about the product you
                  would like to return. We will respond quickly with instructions
                  for how to return items from your order.<br/><br/></strong><strong>Shipping</em></em></em></strong><strong
                  style=''font-weight: 400''><em style=''font-style: normal''><br/><br/></em>We
                  can ship to virtually any address in the world. Note that there
                  are restrictions on some products, and some products cannot be shipped
                  to international destinations.<br/><br/>When you place an order,
                  we will estimate shipping and delivery dates for you based on the
                  availability of your items and the shipping options you choose.
                  Depending on the shipping provider you choose, shipping date estimates
                  may appear on the shipping quotes page.<br/><br/>Please also note
                  that the shipping rates for many items we sell are weight-based.
                  The weight of any such item can be found on its detail page. To
                  reflect the policies of the shipping companies we use, all weights
                  will be rounded up to the next full pound.<br/>'
                feed: ''
                has_mobile_version: false
                id: 2
                is_customers_only: false
                is_homepage: false
                is_visible: true
                layout_file: page.html
                link: ''
                meta_description: ''
                meta_keywords: ''
                meta_title: ''
                mobile_body: ''
                name: Shipping & Returns
                parent_id: 0
                search_keywords: ''
                sort_order: 2
                type: page
                url: /shipping-returns/
              schema:
                $ref: '#/components/schemas/page_Base'
          description: ''
        '207':
          content:
            application/json:
              schema:
                type: object
          description: Multiple operations have taken place and the status for each
            operation can be viewed in the body of the response. Typically indicates
            that a partial failure has occurred, such as when a `POST` or `PUT` request
            is successful, but saving the URL has failed.
      summary: Update a Page
      tags:
      - Pages
      x-codegen-request-body-name: body
  /payments/methods:
    get:
      description: 'Gets the list of enabled payment methods. Default sorting is by
        payment method, alphabetically from A to Z.


        > #### Note

        > Avoid using this API operation if possible. It is not supported; therefore,
        all enabled providers may not appear.

        '
      operationId: getAllPaymentMethods
      parameters:
      - description: Optional filter param `/api/v2/payments/methods?page={number}`
        in: query
        name: page
        schema:
          exclusiveMaximum: false
          exclusiveMinimum: false
          type: number
      - description: Optional filter param `/api/v2/payments/methods?limit={count}`
        in: query
        name: limit
        schema:
          exclusiveMaximum: false
          exclusiveMinimum: false
          type: number
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/payment_Base'
                type: array
          description: ''
      summary: Get All Payment Methods
      tags:
      - Payment Methods
      x-operation-settings:
        AllowDynamicFormParameters: false
        AllowDynamicQueryParameters: false
        CollectParameters: false
        IsMultiContentStreaming: false
      x-unitTests: []
    parameters:
    - $ref: '#/components/parameters/Accept'
  /redirects:
    delete:
      deprecated: true
      description: "By default, it deletes all *Redirect URLs* in a store. \n\n\n\
        > #### Warning\n> **Deprecated**\n> * This API operation is deprecated. Avoid\
        \ using this API operation if possible. It will be removed in a future version.\n\
        > * To delete redirect URLs, use Redirects V3ʼs [Delete redirects](/docs/rest-management/redirects#delete-redirects)\
        \ endpoint."
      operationId: deleteAllRedirects
      responses:
        '204':
          content: {}
          description: ''
      summary: Delete All Redirects
      tags:
      - Redirects
    get:
      deprecated: true
      description: "Returns a list all *Redirect URLs*. \n\n> #### Warning\n> **Deprecated**\n\
        > * This API operation is deprecated. Avoid using this API operation if possible.\
        \ It will be removed in a future version.\n> * To get redirect URLs, use Redirects\
        \ V3ʼs [Get redirects](/docs/rest-management/redirects#get-redirects) endpoint."
      operationId: getAListofRedirects
      parameters:
      - description: Filter param.
        in: query
        name: page
        schema:
          exclusiveMaximum: false
          exclusiveMinimum: false
          type: integer
      - description: Filter param.
        in: query
        name: limit
        schema:
          exclusiveMaximum: false
          exclusiveMinimum: false
          type: integer
      responses:
        '200':
          content:
            Response Schema:
              example: ''
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/redirect'
                type: array
          description: ''
      summary: Get All Redirects
      tags:
      - Redirects
    parameters:
    - $ref: '#/components/parameters/Accept'
    post:
      description: 'Creates a *Redirect URL*.


        **Required Fields**

        *   path

        *   forward


        **Read Only**

        *   url



        > #### Warning

        > **Deprecated**

        > * This API operation is deprecated. Avoid using this API operation if possible.
        It will be removed in a future version.

        > * To upsert new redirect data, use Redirects V3ʼs [Upsert redirects](/docs/rest-management/redirects#upsert-redirects)
        endpoint.'
      operationId: createARedirect
      parameters:
      - $ref: '#/components/parameters/ContentType'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/redirect'
        required: true
      responses:
        '200':
          content:
            application/json:
              example:
                forward:
                  ref: 3
                  type: category
                id: 3
                path: /mens_clothing
                url: http://store.example.com/mens
              schema:
                $ref: '#/components/schemas/redirect'
          description: ''
      summary: Create a Redirect
      tags:
      - Redirects
      x-codegen-request-body-name: body
  /redirects/count:
    get:
      deprecated: true
      description: 'Gets a count of *Redirect URLs* in a store.


        > #### Warning

        > **Deprecated**

        > * This API operation is deprecated. Avoid using this API operation if possible.
        It will be removed in a future version.

        > * To get a count of redirects, use the `meta` object data returned with
        the Redirects V3ʼs [Get redirects](/docs/rest-management/redirects#get-redirects)
        endpoint.'
      operationId: getACountOfRedirects
      responses:
        '200':
          content:
            application/json:
              example:
                count: 27
              schema:
                $ref: '#/components/schemas/count_Response'
          description: ''
      summary: Get a Count of Redirects
      tags:
      - Redirects
    parameters:
    - $ref: '#/components/parameters/Accept'
  /redirects/{id}:
    delete:
      description: "Deletes a *Redirect URL*.\n\n> #### Warning\n> **Deprecated**\
        \ \n> * This API operation is deprecated. Avoid using this API operation if\
        \ possible. It will be removed in a future version.\n> * To delete a redirect\
        \ URL, use Redirects V3ʼs [Delete redirects](/docs/rest-management/redirects#delete-redirects)\
        \ endpoint."
      operationId: deleteARedirect
      responses:
        '204':
          content: {}
          description: ''
      summary: Delete a Redirect
      tags:
      - Redirects
    get:
      deprecated: true
      description: "Returns a single *Redirect URL*.\n\n> #### Warning\n> **Deprecated**\
        \ \n> * This API operation is deprecated. Avoid using this API operation if\
        \ possible. It will be removed in a future version.\n> * To get a redirect\
        \ URL, use Redirects V3ʼs [Get redirects](/docs/rest-management/redirects#get-redirects)\
        \ endpoint."
      operationId: getARedirectURL
      responses:
        '200':
          content:
            application/json:
              example:
                forward:
                  ref: 111
                  type: product
                id: 1
                path: /smith-journal-13/
                url: http://store-url.mybigcommerce.com/towels/bath-towels/hand-towels/
              schema:
                $ref: '#/components/schemas/redirect'
          description: ''
      summary: Get a Redirect
      tags:
      - Redirects
    parameters:
    - $ref: '#/components/parameters/Accept'
    - description: ID of the redirect URL.
      in: path
      name: id
      required: true
      schema:
        exclusiveMaximum: false
        exclusiveMinimum: false
        type: integer
    put:
      description: 'Updates a *Redirect URL*.


        **Required Fields**

        *   path

        *   forward


        **Read Only Fields**

        *   url



        > #### Warning

        > **Deprecated**

        > * This API operation is deprecated. Avoid using this API operation if possible.
        It will be removed in a future version.

        > * To update redirect data, use Redirects V3ʼs [Upsert redirects](/docs/rest-management/redirects#upsert-redirects)
        endpoint.'
      operationId: updateARedirectURL
      parameters:
      - $ref: '#/components/parameters/ContentType'
      requestBody:
        content:
          application/json:
            schema:
              example:
                forward:
                  ref: '111'
                  type: product
                id: 1
                path: /smith-journal-13/
                url: http://store-url.mybigcommerce.com/towels/bath-towels/hand-towels/
              properties:
                forward:
                  properties:
                    ref:
                      description: Reference of the redirect. Dynamic redirects will
                        have the category or product number. Manual redirects will
                        have the url that is being directed to.
                      example: '111'
                      type: string
                    type:
                      description: 'The type of redirect. If it is a manual redirect
                        then type will always be manual. Dynamic redirects will have
                        the type of the page. Such as product or category.

                        '
                      example: product
                      type: string
                  type: object
                id:
                  description: Numeric ID of the redirect.
                  example: 1
                  type: integer
                path:
                  description: The path from which to redirect.
                  example: /smith-journal-13/
                  type: string
                url:
                  description: URL of the redirect. READ-ONLY
                  example: http://store-url.mybigcommerce.com/towels/bath-towels/hand-towels/
                  type: string
              required:
              - forward
              - path
              title: Redirect
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              example:
                forward:
                  ref: 111
                  type: product
                id: 1
                path: /smith-journal-13/
                url: http://store-url.mybigcommerce.com/towels/bath-towels/hand-towels/
              schema:
                $ref: '#/components/schemas/redirect'
          description: ''
      summary: Update a Redirect
      tags:
      - Redirects
      x-codegen-request-body-name: body
  /shipping/carrier/connection:
    delete:
      description: 'Deletes a *Carrier Connection*.


        **Required Fields**

        * carrier_id'
      operationId: deleteCarrierConnection
      requestBody:
        content:
          application/json:
            example:
              carrier_id: fedex
            schema:
              properties:
                carrier_id:
                  example: fedex
                  type: string
              type: object
        required: true
      responses:
        '204':
          description: Returns if request was successful.
        '400':
          content:
            application/json:
              schema: {}
          description: "If a required field is not provided, the request will return\
            \ a 400 response.\n\n[\n    {\n        \"status\": 400,\n        \"message\"\
            : \"Required fields missing [key]\"\n    }\n]"
      summary: Delete a Carrier Connection
      tags:
      - Shipping Carrier
      x-operation-settings:
        AllowDynamicFormParameters: false
        AllowDynamicQueryParameters: false
        CollectParameters: false
        IsMultiContentStreaming: false
      x-unitTests: []
    parameters:
    - $ref: '#/components/parameters/Accept'
    post:
      description: "Creates a *Carrier Connection*. \n\nCarrier connections refer\
        \ to specific settings required to connect to a specific shipping carrier.\
        \ Each carrier requires your app to supply a unique set of properties/fields\
        \ to establish a connection with that carrier.\n\n*Notes:*\n\n- There is no\
        \ `GET` with this resource. It has `PUT`, `POST` and `DELETE`.\n    * `PUT`\
        \ is used to update. The connection can be updated by API.\n\n- Connections\
        \ created here do not enable the shipping method. To enable the carrier for\
        \ a shipping zone, use the Shipping Methods API. \n\n- The Carrier Connection\
        \ resource returns a 204 for both successful and unsuccessful attempts to\
        \ connect. If a field is missing, it will return a 400.\n\n### Australia Post\n\
        \nPUT or POST example request:\n\n```json\n{\n  \"carrier_id\" : \"auspost\"\
        ,\n  \"connection\" : {\n    \"auth_key\" : \"yourAusPostAuthKey\",\n    \"\
        test_mode\" : false\n  }\n}\n```\n\nDELETE example request:\n\n```json\n{\n\
        \  \"carrier_id\" : \"auspost\"\n}\n```\n\n#### Australia Post Connection\
        \ Object – Properties\n\nAustralia Post `PUT` or `POST` requests require all\
        \ of the following properties. (These requests won’t be fulfilled unless these\
        \ properties are valid.) `DELETE` requests require only a `carrier_id`.\n\n\
        \n| Property | Type | Description |\n|:---------|:-----|:------------|\n|\
        \ auth_key | string | Australia Post authorization key. |\n| test_mode | boolean\
        \ | Whether or not to use Australia Post test-mode settings. Acceptable values\
        \ are `true` or `false`. |\n\n\n### Endicia\nUSPS is connected through Endicia.\n\
        \nPUT or POST example request:\n\n```json\n{  \"carrier_id\" : \"endicia\"\
        ,\n  \"connection\": {\n    \"account_id\" : \"yourEndiciaAccountId\",\n \
        \   \"pass_phrase\" : \"yourEndiciaPassphrase\"\n  }\n}\n```\n\nDELETE example\
        \ request:\n\n```json\n{\n  \"carrier_id\" : \"endicia\"\n}\n```\n\n#### Endicia\
        \ Connection Object – Properties\n\nEndicia `PUT` or `POST` requests require\
        \ all of the following properties. (These requests won’t be fulfilled unless\
        \ these properties are valid.) `DELETE` requests require only a `carrier_id`.\n\
        \n\n| Property | Type | Description |\n|:---------|:-----|:------------|\n\
        | account_id | string | Endicia account ID. |\n| passphrase | string | Endicia\
        \ passphrase. |\n\n\n### FedEx\n\nPUT or POST example request:\n\n```json\n\
        {\n  \"carrier_id\" : \"fedex\",\n  \"connection\" : {\n    \"key\" : \"yourFedexKey\"\
        ,\n    \"password\" : \"yourFedexPassword\",\n    \"account_number\" : \"\
        yourFedexAccountNumber\",\n    \"meter_number\" : \"yourFedexMeterNumber\"\
        \n  }\n}\n```\n\nDELETE example request:\n\n```json\n{\n  \"carrier_id\" :\
        \ \"fedex\"\n}\n```\n\n#### FedEx Connection Object – Properties\n\nFedEx\
        \ `PUT` or `POST` requests require all of the following properties. (These\
        \ requests won’t be fulfilled unless these properties are valid.) `DELETE`\
        \ requests require only a `carrier_id`.\n\n\n| Property | Type | Description\
        \ |\n|:---------|:-----|:------------|\n| key | string | FedEx account ID.\
        \ | \n| password | string | FedEx passphrase. |\n| account_number | string\
        \ | FedEx account number. |\n| meter_number | string | FedEx meter number.\
        \ |\n\n### Royal Mail\n\nPUT or POST example request:\n\n```json\n{\n    \"\
        carrier_id\" : \"royalmail\",\n    \"connection\" : {\n        \n    }\n}\n\
        ```\n\nDELETE example request:\n\n```json\n{\n    \"carrier_id\" : \"royalmail\"\
        \n}\n```\n\n#### Royal Mail Connection Object - Properties\n\nRoyal Mail has\
        \ no connection object properties.\n\n\n### Zoom2U\n\nPUT or POST example\
        \ request:\n\n```json\n{\n  \"carrier_id\" : \"zoom2u\",\n  \"connection\"\
        \ : {\n    \"auth_key\" : \"yourZoom2uAuthKey\",\n    \"test_mode\" : false\n\
        \  }\n}\n```\n\nDELETE example request:\n\n```json\n{\n  \"carrier_id\" :\
        \ \"zoom2u\"\n}\n```\n\n#### Zoom2U Connection Object – Properties\n\nZoom2U\
        \ `PUT` or `POST` requests require all of the following properties. (These\
        \ requests won’t be fulfilled unless these properties are valid.) `DELETE`\
        \ requests require only a `carrier_id`.\n\n\n| Property | Type | Description\
        \ |\n|:---------|:-----|:------------|\n| auth_key | string | Zoom2U authorization\
        \ key. |\n| test_mode | boolean | Whether or not to use Zoom2U test-mode settings.\
        \ Acceptable values are `true` or `false`. |"
      operationId: createACarrierConnection
      parameters:
      - $ref: '#/components/parameters/ContentType'
      requestBody:
        content:
          application/json:
            example:
              carrier_id: auspost
              connection:
                auth_key: yourAusPostAuthKey
                test_mode: false
            schema:
              $ref: '#/components/schemas/carrierConnection'
      responses:
        '204':
          description: Returns if request was successful.
        '400':
          content:
            application/json:
              schema: {}
          description: "Invalid requests will return a 400 response.\n\n    [\n  \
            \    {\n        \"status\": 400,\n        \"message\": \"The field 'id'\
            \ cannot be written to. Please remove it from your request before trying\
            \ again.\"\n      }\n    ]\n\nIf a required field is not provided, the\
            \ request will return a 400 response.\n\n    [\n      {\n        \"status\"\
            : 400,\n        \"message\": \"Required fields missing [key]\"\n     \
            \ }\n    ]\n"
      summary: Create a Carrier Connection
      tags:
      - Shipping Carrier
      x-operation-settings:
        AllowDynamicFormParameters: false
        AllowDynamicQueryParameters: false
        CollectParameters: false
        IsMultiContentStreaming: false
      x-unitTests: []
    put:
      description: 'Updates a *Carrier Connection*.


        Updating the carrier connection is done using the same information as creating
        the connection. This endpoint can be used to update credentials.'
      operationId: updateACarrierConnection
      parameters:
      - $ref: '#/components/parameters/ContentType'
      requestBody:
        content:
          application/json:
            example:
              carrier_id: endicia
              connection:
                account_id: yourEndiciaAccountId
                pass_phrase: yourEndiciaPassphrase
            schema:
              $ref: '#/components/schemas/carrierConnection'
        description: The request body will vary by carrier. See [Create a Carrier
          Connection](/docs/rest-management/shipping-v2/shipping-carrier#create-a-carrier-connection).
      responses:
        '204':
          description: Returns if request was successful.
        '400':
          content:
            application/json:
              schema: {}
          description: "If a required field is not provided, the request will return\
            \ a 400 response.\n\n[\n    {\n        \"status\": 400,\n        \"message\"\
            : \"Required fields missing [key]\"\n    }\n]"
      summary: Update a Carrier Connection
      tags:
      - Shipping Carrier
  /shipping/zones:
    get:
      description: Returns a list of all *Shipping Zones*.
      operationId: getAllShippingZones
      responses:
        '200':
          content:
            application/json:
              examples:
                'Example 1: Zones are Country Zones':
                  value:
                  - enabled: true
                    free_shipping:
                      enabled: false
                      exclude_fixed_shipping_products: false
                      minimum_sub_total: '0.0000'
                    id: 1
                    locations:
                    - country_iso2: US
                      id: 5
                    name: United States
                    type: country
                  - enabled: true
                    free_shipping:
                      enabled: false
                      exclude_fixed_shipping_products: false
                      minimum_sub_total: '0.0000'
                    id: 2
                    locations:
                    - country_iso2: AU
                      id: 6
                    name: Australia
                    type: country
                'Example 2: Zone is Selection of States in a Country':
                  value:
                  - enabled: false
                    free_shipping:
                      enabled: false
                      exclude_fixed_shipping_products: true
                      minimum_sub_total: '0'
                    handling_fees:
                      display_separately: false
                      fixed_surcharge: 0
                    id: 2
                    locations:
                    - country_iso2: US
                      id: 3
                      state_iso2: TX
                    - country_iso2: US
                      id: 4
                      state_iso2: TX
                    name: States in the U.S.
                    type: state
              schema:
                items:
                  properties:
                    enabled:
                      description: Whether this shipping zone is enabled.
                      example: true
                      type: boolean
                    free_shipping:
                      properties:
                        enabled:
                          type: boolean
                        exclude_fixed_shipping_products:
                          type: boolean
                        minimum_sub_total:
                          description: (Float, Float-As-String, Integer)
                          example: '0.0000'
                          type: string
                      type: object
                    handling_fees:
                      oneOf:
                      - properties:
                          display_separately:
                            description: Indicates whether store displays handling
                              fee separately at checkout.
                            example: true
                            type: boolean
                          fixed_surcharge:
                            description: Flat-rate handling fee applied to shipping
                              cost.
                            example: '0'
                            type: string
                        title: fixed surcharge
                      - properties:
                          display_separately:
                            description: Indicates whether store displays handling
                              fee separately at checkout.
                            example: true
                            type: boolean
                          percentage_surcharge:
                            description: Percentage handling fee applied to shipping
                              cost.
                            example: '5'
                            type: string
                        title: percentage surcharge
                      title: Shipping Zone Handling Fees
                      type: object
                    id:
                      description: Zone ID
                      example: 1
                      type: integer
                    locations:
                      description: Array of zone locations.
                      items:
                        properties:
                          country_iso2:
                            description: 2-letter ISO Alpha-2 code for the country.
                            example: US
                            type: string
                          id:
                            description: Location’s ID.
                            example: 3
                            type: integer
                          state_iso2:
                            description: ISO Alpha-2 code for the state.
                            example: TX
                            type: string
                          zip:
                            description: Location’s ZIP/postal code.
                            example: '12345'
                            type: string
                        title: Shipping Zone Locations
                        type: object
                      type: array
                    name:
                      description: Zone name. Required for PUT requests.
                      example: United States
                      type: string
                    type:
                      enum:
                      - zip
                      - country
                      - state
                      - global
                      type: string
                  title: Shipping Zone
                  type: object
                type: array
          description: ''
      summary: Get All Shipping Zones
      tags:
      - Shipping Zones
      x-operation-settings:
        AllowDynamicFormParameters: false
        AllowDynamicQueryParameters: false
        CollectParameters: false
        IsMultiContentStreaming: false
      x-unitTests: []
    parameters:
    - $ref: '#/components/parameters/Accept'
    post:
      description: Creates a *Shipping Zone*.
      operationId: createAShippingZones
      parameters:
      - $ref: '#/components/parameters/ContentType'
      requestBody:
        content:
          application/json:
            examples:
              'Type: Country':
                value:
                  locations:
                  - country_iso2: MX
                  name: Mexico
                  type: country
              'Type: Global':
                value:
                  name: Global
                  type: global
              'Type: State':
                value:
                  locations:
                  - country_iso2: US
                    state_iso2: SC
                  name: South Carolina
                  type: state
              'Type: ZIP':
                value:
                  locations:
                  - country_iso2: US
                    zip: '11103'
                  name: United States
                  type: zip
            schema:
              properties:
                enabled:
                  description: Whether this shipping zone is enabled.
                  example: true
                  type: boolean
                free_shipping:
                  properties:
                    enabled:
                      type: boolean
                    exclude_fixed_shipping_products:
                      type: boolean
                    minimum_sub_total:
                      description: (Float, Float-As-String, Integer)
                      example: '0.0000'
                      type: string
                  type: object
                handling_fees:
                  oneOf:
                  - properties:
                      display_separately:
                        description: Indicates whether store displays handling fee
                          separately at checkout.
                        example: true
                        type: boolean
                      fixed_surcharge:
                        description: Flat-rate handling fee applied to shipping cost.
                        example: '0'
                        type: string
                    title: fixed surcharge
                  - properties:
                      display_separately:
                        description: Indicates whether store displays handling fee
                          separately at checkout.
                        example: true
                        type: boolean
                      percentage_surcharge:
                        description: Percentage handling fee applied to shipping cost.
                        example: '5'
                        type: string
                    title: percentage surcharge
                  title: Shipping Zone Handling Fees
                  type: object
                locations:
                  description: Array of zone locations.
                  items:
                    properties:
                      country_iso2:
                        description: 2-letter ISO Alpha-2 code for the country.
                        example: US
                        type: string
                      id:
                        description: Location’s ID.
                        example: 3
                        type: integer
                      state_iso2:
                        description: ISO Alpha-2 code for the state.
                        example: TX
                        type: string
                      zip:
                        description: Location’s ZIP/postal code.
                        example: '12345'
                        type: string
                    title: Shipping Zone Locations
                    type: object
                  type: array
                name:
                  description: Zone name. Required for PUT requests.
                  example: United States
                  type: string
                type:
                  enum:
                  - zip
                  - country
                  - state
                  - global
                  type: string
              required:
              - name
              - type
              title: Shipping Zone
              type: object
      responses:
        '200':
          content:
            application/json:
              examples: {}
              schema:
                properties:
                  enabled:
                    description: Whether this shipping zone is enabled.
                    example: true
                    type: boolean
                  free_shipping:
                    properties:
                      enabled:
                        type: boolean
                      exclude_fixed_shipping_products:
                        type: boolean
                      minimum_sub_total:
                        description: (Float, Float-As-String, Integer)
                        example: '0.0000'
                        type: string
                    type: object
                  handling_fees:
                    oneOf:
                    - properties:
                        display_separately:
                          description: Indicates whether store displays handling fee
                            separately at checkout.
                          example: true
                          type: boolean
                        fixed_surcharge:
                          description: Flat-rate handling fee applied to shipping
                            cost.
                          example: '0'
                          type: string
                      title: fixed surcharge
                    - properties:
                        display_separately:
                          description: Indicates whether store displays handling fee
                            separately at checkout.
                          example: true
                          type: boolean
                        percentage_surcharge:
                          description: Percentage handling fee applied to shipping
                            cost.
                          example: '5'
                          type: string
                      title: percentage surcharge
                    title: Shipping Zone Handling Fees
                    type: object
                  id:
                    description: Zone ID.
                    example: 1
                    type: integer
                  locations:
                    description: Array of zone locations.
                    items:
                      properties:
                        country_iso2:
                          description: 2-letter ISO Alpha-2 code for the country.
                          example: US
                          type: string
                        id:
                          description: Location ID.
                          example: 3
                          type: integer
                        state_iso2:
                          description: ISO Alpha-2 code for the state.
                          example: TX
                          type: string
                        zip:
                          description: Location’s ZIP/postal code.
                          example: '12345'
                          type: string
                      title: Shipping Zone Locations
                      type: object
                    type: array
                  name:
                    description: Zone name.
                    example: United States
                    type: string
                  type:
                    enum:
                    - zip
                    - country
                    - state
                    - global
                    type: string
                title: Shipping Zone
                type: object
          description: ''
      summary: Create a Shipping Zone
      tags:
      - Shipping Zones
  /shipping/zones/{id}:
    delete:
      description: Deletes a *Shipping Zone*.
      operationId: deleteAShippingZone
      responses:
        '204':
          description: ''
      summary: Delete a Shipping Zone
      tags:
      - Shipping Zones
      x-operation-settings:
        AllowDynamicFormParameters: false
        AllowDynamicQueryParameters: false
        CollectParameters: false
        IsMultiContentStreaming: false
      x-unitTests: []
    get:
      description: Returns a single *Shipping Zone*.
      operationId: getAShippingZone
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  enabled:
                    description: Whether this shipping zone is enabled.
                    example: true
                    type: boolean
                  free_shipping:
                    properties:
                      enabled:
                        type: boolean
                      exclude_fixed_shipping_products:
                        type: boolean
                      minimum_sub_total:
                        description: (Float, Float-As-String, Integer)
                        example: '0.0000'
                        type: string
                    type: object
                  handling_fees:
                    oneOf:
                    - properties:
                        display_separately:
                          description: Indicates whether store displays handling fee
                            separately at checkout.
                          example: true
                          type: boolean
                        fixed_surcharge:
                          description: Flat-rate handling fee applied to shipping
                            cost.
                          example: '0'
                          type: string
                      title: fixed surcharge
                    - properties:
                        display_separately:
                          description: Indicates whether store displays handling fee
                            separately at checkout.
                          example: true
                          type: boolean
                        percentage_surcharge:
                          description: Percentage handling fee applied to shipping
                            cost.
                          example: '5'
                          type: string
                      title: percentage surcharge
                    title: Shipping Zone Handling Fees
                    type: object
                  id:
                    description: Zone ID
                    example: 1
                    type: integer
                  locations:
                    description: Array of zone locations.
                    items:
                      properties:
                        country_iso2:
                          description: 2-letter ISO Alpha-2 code for the country.
                          example: US
                          type: string
                        id:
                          description: Location’s ID.
                          example: 3
                          type: integer
                        state_iso2:
                          description: ISO Alpha-2 code for the state.
                          example: TX
                          type: string
                        zip:
                          description: Location’s ZIP/postal code.
                          example: '12345'
                          type: string
                      title: Shipping Zone Locations
                      type: object
                    type: array
                  name:
                    description: Zone name.
                    example: United States
                    type: string
                  type:
                    enum:
                    - zip
                    - country
                    - state
                    - global
                    type: string
                title: Shipping Zone
                type: object
          description: ''
      summary: Get a Shipping Zones
      tags:
      - Shipping Zones
    parameters:
    - $ref: '#/components/parameters/Accept'
    - description: ID of the shipping zone.
      in: path
      name: id
      required: true
      schema:
        exclusiveMaximum: false
        exclusiveMinimum: false
        type: integer
    put:
      description: 'Updates a *Shipping Zone*.


        **Required Fields**

        * name


        **Read Only Fields**

        * id'
      operationId: updateAShippingZone
      parameters:
      - $ref: '#/components/parameters/ContentType'
      requestBody:
        content:
          application/json:
            schema:
              properties:
                enabled:
                  description: Whether this shipping zone is enabled.
                  example: true
                  type: boolean
                free_shipping:
                  properties:
                    enabled:
                      type: boolean
                    exclude_fixed_shipping_products:
                      type: boolean
                    minimum_sub_total:
                      description: (Float, Float-As-String, Integer)
                      example: '0.0000'
                      type: string
                  type: object
                handling_fees:
                  oneOf:
                  - properties:
                      display_separately:
                        description: Indicates whether store displays handling fee
                          separately at checkout.
                        example: true
                        type: boolean
                      fixed_surcharge:
                        description: Flat-rate handling fee applied to shipping cost.
                        example: '0'
                        type: string
                    title: fixed surcharge
                  - properties:
                      display_separately:
                        description: Indicates whether store displays handling fee
                          separately at checkout.
                        example: true
                        type: boolean
                      percentage_surcharge:
                        description: Percentage handling fee applied to shipping cost.
                        example: '5'
                        type: string
                    title: percentage surcharge
                  title: Shipping Zone Handling Fees
                  type: object
                id:
                  description: Zone ID. Read-only.
                  example: 1
                  readOnly: true
                  type: integer
                locations:
                  description: Array of zone locations.
                  items:
                    properties:
                      country_iso2:
                        description: 2-letter ISO Alpha-2 code for the country.
                        example: US
                        type: string
                      id:
                        description: Location’s ID.
                        example: 3
                        type: integer
                      state_iso2:
                        description: ISO Alpha-2 code for the state.
                        example: TX
                        type: string
                      zip:
                        description: Location’s ZIP/postal code.
                        example: '12345'
                        type: string
                    title: Shipping Zone Locations
                    type: object
                  type: array
                name:
                  description: Zone name. Required for PUT requests.
                  example: United States
                  type: string
                type:
                  enum:
                  - zip
                  - country
                  - state
                  - global
                  type: string
              required:
              - name
              title: Shipping Zone
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  enabled:
                    description: Whether this shipping zone is enabled.
                    example: true
                    type: boolean
                  free_shipping:
                    properties:
                      enabled:
                        type: boolean
                      exclude_fixed_shipping_products:
                        type: boolean
                      minimum_sub_total:
                        description: (Float, Float-As-String, Integer)
                        example: '0.0000'
                        type: string
                    type: object
                  handling_fees:
                    oneOf:
                    - properties:
                        display_separately:
                          description: Indicates whether store displays handling fee
                            separately at checkout.
                          example: true
                          type: boolean
                        fixed_surcharge:
                          description: Flat-rate handling fee applied to shipping
                            cost.
                          example: '0'
                          type: string
                      title: fixed surcharge
                    - properties:
                        display_separately:
                          description: Indicates whether store displays handling fee
                            separately at checkout.
                          example: true
                          type: boolean
                        percentage_surcharge:
                          description: Percentage handling fee applied to shipping
                            cost.
                          example: '5'
                          type: string
                      title: percentage surcharge
                    title: Shipping Zone Handling Fees
                    type: object
                  id:
                    description: Zone ID. Read-only.
                    example: 1
                    readOnly: true
                    type: integer
                  locations:
                    description: Array of zone locations.
                    items:
                      properties:
                        country_iso2:
                          description: 2-letter ISO Alpha-2 code for the country.
                          example: US
                          type: string
                        id:
                          description: Location’s ID.
                          example: 3
                          type: integer
                        state_iso2:
                          description: ISO Alpha-2 code for the state.
                          example: TX
                          type: string
                        zip:
                          description: Location’s ZIP/postal code.
                          example: '12345'
                          type: string
                      title: Shipping Zone Locations
                      type: object
                    type: array
                  name:
                    description: Zone name. Required for PUT requests.
                    example: United States
                    type: string
                  type:
                    enum:
                    - zip
                    - country
                    - state
                    - global
                    type: string
                required:
                - name
                title: Shipping Zone
                type: object
          description: ''
      summary: Update a Shipping Zone
      tags:
      - Shipping Zones
  /shipping/zones/{zone_id}/methods:
    get:
      description: Returns a list of *Shipping Methods* in a zone. Default sorting
        is by shipping method ID, from lowest to highest.
      operationId: getShippingMethodsZone
      responses:
        '200':
          content:
            application/json:
              examples:
                Example 1:
                  value:
                  - enabled: true
                    handling_fees:
                      fixed_surcharge: '0'
                    id: 1
                    is_fallback: false
                    name: Flat Rate
                    settings:
                      rate: 12
                    type: perorder
                  - enabled: false
                    handling_fees:
                      fixed_surcharge: '0'
                    id: 2
                    is_fallback: false
                    name: Pickup In Store
                    settings: {}
                    type: total
                  - enabled: true
                    handling_fees:
                      fixed_surcharge: '0'
                    id: 3
                    is_fallback: false
                    name: Ship by Weight
                    settings:
                      default_cost: 0
                      default_cost_type: fixed_amount
                      range:
                      - lower_limit: 0
                        shipping_cost: 8
                        upper_limit: 20
                      - lower_limit: 20
                        shipping_cost: 8
                        upper_limit: 40
                      - lower_limit: 40
                        shipping_cost: 8
                        upper_limit: 60
                      - lower_limit: 60
                        shipping_cost: 8
                        upper_limit: 80
                    type: weight
                  - enabled: true
                    handling_fees:
                      fixed_surcharge: '0'
                    id: 4
                    is_fallback: false
                    name: UPS®
                    settings:
                      carrier_options:
                        delivery_services:
                        - Express
                        - Ground
                        - Next_Day_Air
                        - Saver
                        - Standard
                        destination_type: residential
                        include_package_value: '1'
                        packaging: []
                        packaging_type: 2c
                        packing_method: combined
                        show_transit_time: '1'
                    type: upsready
                Example 2:
                  value:
                  - enabled: true
                    handling_fees:
                      fixed_surcharge: '0'
                    id: 23225205
                    is_fallback: false
                    name: tempo
                    settings: {}
                    type: royalmail
                  - enabled: true
                    handling_fees:
                      percentage_surcharge: '0'
                    id: 35889344
                    is_fallback: false
                    name: Lorem Excepteur esse
                    settings: {}
                    type: canadapost
              schema:
                items:
                  $ref: '#/components/schemas/shippingMethod_Full'
                type: array
          description: ''
      summary: Get All Shipping Methods in a Zone
      tags:
      - Shipping Method
    parameters:
    - $ref: '#/components/parameters/Accept'
    - description: ID of the shipping zone.
      in: path
      name: zone_id
      required: true
      schema:
        exclusiveMaximum: false
        exclusiveMinimum: false
        type: integer
    post:
      description: "Creates a *Shipping Method* within a shipping zone. Real Time\
        \ Carrier Connections are also supported by this endpoint. \n\n## Carrier\
        \ Configurations – Current\n\nThis section provides a sample request and a\
        \ carrier-specific object/property model, for each supported carrier.\n\n\
        ### USPS by Endicia\n\nExample request body:\n\n```json\n{\n    \"name\":\
        \ \"USPS by Endicia\",\n    \"type\": \"endicia\",\n    \"settings\": {\n\
        \        \"carrier_options\": {\n            \"delivery_services\" : [\"PriorityExpress\"\
        ,\"Priority\", \"PriorityMailExpressInternational\"],\n            \"packaging_type\"\
        \ : \"LargeFlatRateBox\",\n            \"show_transit_time\" : true\n    \
        \    }\n    },\n    \"enabled\": true\n}\n```\n\n#### USPS by Endicia Object\
        \ Properties\n\n| Property | Type | Values |\n|:---------|:-----|:-------|\n\
        | delivery_services | array | PriorityExpress, PriorityMailExpressInternational,\
        \ FirstClassPackageInternationalService, Priority, PriorityMailInternational,\
        \ First, ParcelSelect, MediaMail |\n| packaging_type | array | FlatRateLegalEnvelope,\
        \ FlatRatePaddedEnvelope, Parcel, SmallFlatRateBox, MediumFlatRateBox, LargeFlatRateBox,\
        \ FlatRateEnvelope, RegionalRateBoxA, RegionalRateBoxB |\n|show_transit_time\
        \ | boolean | true, false |\n\n### FedEx\n\nExample request body:\n\n```json\n\
        {\n    \"name\": \"FEDEX\",\n    \"type\": \"fedex\",\n    \"settings\": {\n\
        \        \"carrier_options\": {\n            \"delivery_services\": [\n  \
        \              \"PRIORITY_OVERNIGHT\",\n                \"FEDEX_2_DAY\"\n\
        \            ],\n            \"dropoff_type\": \"REGULAR_PICKUP\",\n     \
        \       \"packaging_type\": \"FEDEX_ENVELOPE\",\n            \"packing_method\"\
        : \"SEPARATE\",\n            \"rate_type\": \"NONE\",\n            \"include_package_value\"\
        : true,\n            \"destination_type\": \"residential\"\n        }\n  \
        \  },\n    \"enabled\": true\n}\n\n```\n\n#### FedEx Object Properties\n\n\
        | Property | Type | Values |\n|:---------|:-----|:-------|\n| delivery_services\
        \ | array | PRIORITY_OVERNIGHT, STANDARD_OVERNIGHT, FIRST_OVERNIGHT, FEDEX_2_DAY,\
        \ FEDEX_EXPRESS_SAVER, INTERNATIONAL_PRIORITY, INTERNATIONAL_ECONOMY, INTERNATIONAL_FIRST,\
        \ FEDEX_1_DAY_FREIGHT, FEDEX_2_DAY_FREIGHT, FEDEX_3_DAY_FREIGHT, FEDEX_GROUND,\
        \ GROUND_HOME_DELIVERY, INTERNATIONAL_PRIORITY_FREIGHT, INTERNATIONAL_ECONOMY_FREIGHT,\
        \ EUROPE_FIRST_INTERNATIONAL_PRIORITY |\n| dropoff_type | string | REGULAR_PICKUP,\
        \ REQUEST_COURIER, DROP_BOX, BUSINESS_SERVICE_CENTER, STATION |\n| packaging_type\
        \ | string | FEDEX_ENVELOPE,  FEDEX_PAK, FEDEX_BOX, FEDEX_TUBE, FEDEX_10KG_BOX,\
        \ FEDEX_25KG_BOX, YOUR_PACKAGING |\n| packing_method | string | SEPARATE,\
        \ COMBINED |\n| rate_type | string | NONE, LIST |\n| include_package_value\
        \ | boolean | true, false |\n| destination_type | string | residential, business\
        \ |\n\n\n### UPS Ready\n\nExample request body:\n\n```json\n{\n    \"name\"\
        : \"UPS ready\",\n    \"type\": \"upsready\",\n    \"settings\": {\n     \
        \   \"carrier_options\": {\n            \"delivery_services\": [\n       \
        \         \"2nd_Day_Air\",\"Standard\"\n            ],\n            \"packaging_type\"\
        : \"21\",\n            \"packing_method\": \"separate\",\n            \"include_package_value\"\
        : true,\n            \"destination_type\": \"residential\",\n            \"\
        show_transit_time\" : true\n        }\n    },\n    \"enabled\": true\n}\n\n\
        ```\n\n#### UPS Ready Object Properties\n\n| Property | Type | Values |\n\
        |:---------|:-----|:-------|\n| delivery_services | array | 2nd_Day_Air, 2nd_Day_Air_AM,\
        \ 3_Day_Select, Expedited, Express, Express_Plus, Express_Saver, Express_Early_AM,\
        \ Ground, Next_Day_Air, Next_Day_Air_Early_AM, Next_Day_Air_Saver, Saver,\
        \ Standard, Today_Dedicated_Courier, Today_Express, Today_Express_Saver, Today_Intercity,\
        \ Today_Standard, Worldwide_Expedited, Worldwide_Express, Worldwide_Express_Plus,\
        \ Worldwide_Express_Saver, Worldwide_Saver |\n| destination_type | string\
        \ | residential, business |\n| packing_method | string | separate, combined\
        \ |\n| packaging_type | string (only codes allowed) | See the following table\
        \ |\n| include_package_value | boolean | true, false |\n| show_transit_time\
        \ | boolean | true, false |\n\nUPS `packaging_type` values include:\n\n| Code\
        \ | Description |\n|:----:|:------------|\n| 21 | UPS® Express Box |\n| 24\
        \ | UPS® 25 KG Box |\n| 25 | UPS® 10 KG Box |\n| 30 | Pallet |\n| 01 | UPS®\
        \ Letter |\n| 02 | Customer Supplied Package |\n| 03 | Tube |\n| 04 | PAK\
        \ |\n| 2a | Small Express Box |\n| 2b | Medium Express Box |\n| 2c | Large\
        \ Express Box |\n\n\n### Canada Post\n\nExample request body:\n\n```json\n\
        {\n    \"name\": \"Canada Post\",\n    \"type\": \"canadapost\",\n    \"settings\"\
        : {\n        \"carrier_options\": {\n            \"delivery_services\": [\n\
        \                \"DOM.RP\",\"DOM.EP\"\n            ]\n        }\n    },\n\
        \    \"enabled\": true\n}\n\n```\n\n#### Canada Post Object Properties\n\n\
        | Property | Type | Values |\n|:---------|:-----|:-------|\n| delivery_services\
        \ | array | DOM.RP, DOM.EP, DOM.XP, DOM.XP.CERT, DOM.PC DOM.LIB, USA.EP, USA.PW.ENV,\
        \ USA.PW.PAK, USA.PW.PARCEL, USA.SP.AIR, USA.TP, USA.TP.LVM, USA.XP, INT.XP,\
        \ INT.IP.AIR, INT.IP.SURF, INT.PW.ENV, INT.PW.PAK, INT.PW.PARCEL, INT.SP.AIR,\
        \ INT.SP.SURF, INT.TP |\n\n### Australia Post\n\nExample request body:\n\n\
        ```json\n{\n    \"name\": \"Australia Post\",\n    \"type\": \"auspost\",\n\
        \    \"settings\": {\n        \"carrier_options\": {\n            \"delivery_services\"\
        : [\n                \"AUS_PARCEL_REGULAR\",\n        \"AUS_PARCEL_EXPRESS\"\
        \n            ]\n        }\n    },\n    \"enabled\": true\n}\n\n```\n\n####\
        \ Australia Post Object Properties\n\n| Property | Type | Values |\n|:---------|:-----|:-------|\n\
        | delivery_services | array | AUS_LETTER_REGULAR_SMALL, AUS_LETTER_REGULAR_Large,\
        \ AUS_LETTER_EXPRESS_SMALL, AUS_LETTER_EXPRESS_MEDIUM, AUS_LETTER_EXPRESS_LARGE,\
        \ AUS_PARCEL_REGULAR, AUS_PARCEL_REGULAR_SATCHEL_500G, AUS_PARCEL_REGULAR_SATCHEL_3KG,\
        \ AUS_PARCEL_REGULAR_SATCHEL_5KG, AUS_PARCEL_EXPRESS, AUS_PARCEL_EXPRESS_SATCHEL_500G,\
        \ AUS_PARCEL_EXPRESS_SATCHEL_3KG, AUS_PARCEL_EXPRESS_SATCHEL_5KG, AUS_PARCEL_COURIER,\
        \ AUS_PARCEL_COURIER_SATCHEL_MEDIUM, INT_PARCEL_COR_OWN_PACKAGING, INT_PARCEL_EXP_OWN_PACKAGING,\
        \ INT_PARCEL_STD_OWN_PACKAGING, INT_PARCEL_AIR_OWN_PACKAGING, INT_PARCEL_SEA_OWN_PACKAGING\
        \ |\n\n### Royal Mail\n\nExample request body:\n\n```json\n{\n    \"name\"\
        : \"Royal Mail\",\n    \"type\": \"royalmail\",\n    \"settings\": {\n   \
        \     \"carrier_options\": {\n            \"delivery_services\": [\n     \
        \           \"StandardFirstClass\",\n                \"StandardSecondClass\"\
        \n            ]\n        }\n    },\n    \"enabled\": true\n}\n```\n\n####\
        \ Royal Mail Object Properties\n\n| Property | Type | Values |\n|:---------|:-----|:-------|\n\
        | delivery_services | array | SpecialDelivery1pm, SpecialDelivery9am, SpecialDelivery1pmSaturday,\
        \ SpecialDelivery9amSaturday, SignedForFirstClass, SignedForSecondClass, Express9,\
        \ Express10, ExpressAM, Express24, Express48, StandardFirstClass, StandardSecondClass,\
        \ InternationalStandard, InternationalTracked, InternationalEconomy |\n\n\
        ### Zoom2U\n\nExample request body:\n\n```json\n{\n    \"name\": \"Zoom2U\"\
        ,\n    \"type\": \"zoom2u\",\n    \"settings\": {\n        \"carrier_options\"\
        : {\n            \"delivery_services\": [\n                \"3_hour\",\n \
        \       \"Same_day\",\n        \"VIP\"\n            ]\n        }\n    },\n\
        \    \"enabled\": true\n}\n```\n\n#### Zoom2U Object Properties\n\n| Property\
        \ | Type | Values |\n|:---------|:-----|:-------|\n| delivery_services | array\
        \ | 3_hour, Same_day, VIP|\n\n### Settings Objects \n\nA shipping methodʼs\
        \ `type` and `settings` properties can match one of the following models:\n\
        \n#### perorder Object – Properties \n\nObject model for flat-rate shipping\
        \ quotes per order.\n\n| Property | Type | Description |\n|:---------|:-----|:------------|\n\
        | rate | number | Flat rate per order. |\n\nExample request body: \n\n```json\n\
        {\n  \"name\": \"Flat Rate per Order\",\n  \"type\": \"perorder\",\n  \"settings\"\
        : {\n    \"rate\": 7\n  }\n}\n```\n\n#### peritem Object – Properties \n\n\
        Object model for flat-rate shipping quotes per item ordered.\n\n| Name | Type\
        \ | Description |\n|:-----|:-----|:------------|\n| rate | number | Flat rate\
        \ per item. |\n\nEzample request body:\n\n```json\n{\n  \"name\": \"Flat Rate\
        \ per Item\",\n  \"type\": \"peritem\",\n  \"settings\": {\n    \"rate\":\
        \ 8\n  }\n}\n```\n\n#### weight Object – Properties \n\nObject model for shipping\
        \ quotes by weight.\n\n| Property | Type | Description |\n|:---------|:-----|:------------|\n\
        | default_cost | number | Default shipping cost, applied either as a percentage\
        \ of the orderʼs total value or as a fixed amount. |\n| default_cost_type\
        \ | string | How the default shipping cost is calculated; either `percentage_of_total`\
        \ or `fixed_amount`. |\n| range | number | Array of [range](#range) objects.\
        \ The units for these ranges' `lower_limit` and `upper_limit` properties depend\
        \ on the default units set in the storeʼs control panel. |\n\nExample request\
        \ body:\n  \n```json\n{\n  \"name\": \"Rate per Weight\",\n  \"type\": \"\
        weight\",\n  \"settings\": {\n    \"default_cost\": 12,\n    \"default_cost_type\"\
        : \"fixed_amount\",\n    \"range\": [\n      {\n        \"lower_limit\": 0,\n\
        \        \"upper_limit\": 20,\n        \"shipping_cost\": 8\n      },\n  \
        \    {\n        \"lower_limit\": 20,\n        \"upper_limit\": 40,\n     \
        \   \"shipping_cost\": 12\n      }\n    ]\n  }\n}\n```\n\n#### total Object\
        \ – Properties \n\nObject model for shipping quotes by orderʼs total value.\n\
        \n| Property | Type | Description |\n|:---------|:-----|:------------|\n|\
        \ default_cost | number | Default shipping cost, applied either as a percentage\
        \ of the orderʼs total value or as a fixed amount. |\n| default_cost_type\
        \ | string | How the default shipping cost is calculated; either `percentage_of_total`\
        \ or `fixed_amount`. |\n| include_order_total_taxes | boolean | Whether or\
        \ not to include taxes on the orderʼs total value in the shipping cost calculation.\
        \ |\n| range | number | Array of [range](#range) objects. The units for these\
        \ ranges' `lower_limit` and `upper_limit` properties are values in the storeʼs\
        \ currency. |\n\nExample request body:\n\nThis example sets free shipping\
        \ above a certain order total:\n\n```json\n{\n  \"name\": \"Per Total or Free\"\
        ,\n  \"type\": \"total\",\n  \"settings\": {\n    \"default_cost\": 12,\n\
        \    \"default_cost_type\": \"fixed_amount\",\n    \"include_order_total_taxes\"\
        : 0,\n    \"range\": [\n      {\n        \"lower_limit\": 0,\n        \"upper_limit\"\
        : 5,\n        \"shipping_cost\": 5\n      },\n      {\n        \"lower_limit\"\
        : 5,\n        \"upper_limit\": 10,\n        \"shipping_cost\": 8\n      },\n\
        \      {\n        \"lower_limit\": 10,\n        \"upper_limit\": 20,\n   \
        \     \"shipping_cost\": 10\n      },\n      {\n        \"lower_limit\": 20,\n\
        \        \"upper_limit\": 49.99,\n        \"shipping_cost\": 15\n      },\n\
        \      {\n        \"lower_limit\": 50,\n        \"upper_limit\": 100000,\n\
        \        \"shipping_cost\": 0\n      }       \n    ]\n  }\n}\n```\n\n####\
        \ Range Object – Properties \n\nObject model to define ranges for shipping\
        \ quotes. Units are defined in the parent object.\n\n| Property | Type | Description\
        \ |\n|:---------|:-----|:------------|\n| lower_limit | number | Lower limit\
        \ for order total. |\n| upper_limit | number | Upper limit for order total.\
        \ |\n| shipping_cost | number | Shipping cost for orders whose total falls\
        \ between the lower and upper limits. |\n\n\nExample request body: \n\n```json\n\
        {\n  \"lower_limit\": 0,\n  \"upper_limit\": 20,\n  \"shipping_cost\": 8\n\
        }\n```  "
      operationId: createAShippingMethod
      parameters:
      - $ref: '#/components/parameters/ContentType'
      requestBody:
        content:
          application/json:
            example:
              enabled: true
              handling_fees:
                fixed_surcharge: '3'
              name: Per Order
              settings:
                rate: 8
              type: perorder
            schema:
              $ref: '#/components/schemas/shippingMethod_Base'
        required: true
      responses:
        '200':
          content:
            application/json:
              examples:
                Example 1:
                  value:
                    enabled: true
                    handling_fees:
                      fixed_surcharge: '3'
                    id: 5
                    name: Per Order
                    settings:
                      rate: 8
                    type: perorder
                Example 2:
                  value:
                    enabled: false
                    handling_fees:
                      fixed_surcharge: '0'
                    id: 19609616
                    is_fallback: false
                    name: ad sed
                    settings: {}
                    type: auspost
              schema:
                $ref: '#/components/schemas/shippingMethod_Full'
          description: ''
      summary: Create a Shipping Method
      tags:
      - Shipping Method
  /shipping/zones/{zone_id}/methods/{method_id}:
    delete:
      description: Deletes an *Shipping Method*. Real Time Carrier Connections can
        also be deleted.
      operationId: deleteAShippingMethod
      responses:
        '204':
          description: ''
      summary: Delete a Shipping Method
      tags:
      - Shipping Method
      x-operation-settings:
        AllowDynamicFormParameters: false
        AllowDynamicQueryParameters: false
        CollectParameters: false
        IsMultiContentStreaming: false
      x-unitTests: []
    get:
      description: "Returns a single *Shipping Method* in a zone. Real Time Carrier\
        \ Connections are also supported by this endpoint.\n\n### Settings Objects\n\
        \nA shipping methodʼs `type` and `settings` properties can match one of the\
        \ following models:\n\n### perorder Object – Properties\n\nObject model for\
        \ flat-rate shipping quotes per order.\n\n| Name | Type | Description |\n\
        | - | - | - |\n| rate | number | Flat rate per order. |\n\n#### JSON Example\n\
        \n```json\n{\n    \"name\": \"Flat Rate per Order\",\n    \"type\": \"perorder\"\
        ,\n    \"settings\": {\n        \"rate\": 7\n},\n```\n\n### peritem Object\
        \ – Properties\n\nObject model for flat-rate shipping quotes per item ordered.\n\
        \n| Name | Type | Description |\n| - | - | - |\n| rate | number | Flat rate\
        \ per item. |\n\n#### JSON Example\n\n```json\n{\n    \"name\": \"Flat Rate\
        \ per Item\",\n    \"type\": \"peritem\",\n    \"settings\": {\n        \"\
        rate\": 8\n},\n```\n\n### weight Object – Properties\n\nObject model for shipping\
        \ quotes by weight.\n\n| Name | Type | Description |\n| - | - | - |\n| default_cost\
        \ | number | Default shipping cost, applied either as a percentage of the\
        \ orderʼs total value or as a fixed amount. |\n| default_cost_type | string\
        \ | How the default shipping cost is calculated; either `percentage_of_total`\
        \ or `fixed_amount`. |\n| range | number | Array of [range](#range) objects.\
        \ The units for these ranges' `lower_limit` and `upper_limit` properties depend\
        \ on the default units set in the storeʼs control panel. |\n\n\n#### JSON\
        \ Example\n```json\n{\n    \"name\": \"Rate per Weight\",\n    \"type\": \"\
        weight\",\n    \"settings\": {\n        \"default_cost\": 12,\n        \"\
        default_cost_type\": \"fixed_amount\",\n        \"range\": [\n           \
        \ {\n                \"lower_limit\": 0,\n                \"upper_limit\"\
        : 20,\n                \"shipping_cost\": 8\n            },\n            {\n\
        \                \"lower_limit\": 20,\n                \"upper_limit\": 40,\n\
        \                \"shipping_cost\": 12\n            }\n        ]\n    }\n\
        }\n```\n\n### total Object – Properties\n\nObject model for shipping quotes\
        \ by orderʼs total value.\n\n| Name | Type | Description |\n| - | - | - |\n\
        | default_cost | number | Default shipping cost, applied either as a percentage\
        \ of the orderʼs total value or as a fixed amount. |\n| default_cost_type\
        \ | string | How the default shipping cost is calculated; either `percentage_of_total`\
        \ or `fixed_amount`. |\n| include_order_total_taxes | boolean | Whether or\
        \ not to include taxes on the orderʼs total value in the shipping cost calculation.\
        \ |\n| range | number | Array of [range](#range) objects. The units for these\
        \ ranges' `lower_limit` and `upper_limit` properties are values in the storeʼs\
        \ currency. |\n\n#### JSON Example\n\nThis example sets free shipping above\
        \ a certain order total:\n\n```json\n{\n    \"name\": \"Per Total or Free\"\
        ,\n    \"type\": \"total\",\n    \"settings\": {\n        \"default_cost\"\
        : 12,\n        \"default_cost_type\": \"fixed_amount\",\n        \"include_order_total_taxes\"\
        : 0,\n        \"range\": [\n            {\n                \"lower_limit\"\
        : 0,\n                \"upper_limit\": 5,\n                \"shipping_cost\"\
        : 5\n            },\n            {\n                \"lower_limit\": 5,\n\
        \                \"upper_limit\": 10,\n                \"shipping_cost\":\
        \ 8\n            },\n            {\n                \"lower_limit\": 10,\n\
        \                \"upper_limit\": 20,\n                \"shipping_cost\":\
        \ 10\n            },\n            {\n                \"lower_limit\": 20,\n\
        \                \"upper_limit\": 49.99,\n                \"shipping_cost\"\
        : 15\n            },\n            {\n                \"lower_limit\": 50,\n\
        \                \"upper_limit\": 100000,\n                \"shipping_cost\"\
        : 0\n            }\n        ]\n    }\n}\n```\n\n### Range Object – Properties\n\
        \nObject model to define ranges for shipping quotes. Units are defined in\
        \ the parent object.\n\n| Name | Type | Description |\n| - | - | - |\n| lower_limit\
        \ | number | Lower limit for order total. |\n| upper_limit | number | Upper\
        \ limit for order total. |\n| shipping_cost | number | Shipping cost for orders\
        \ whose total falls between the lower and upper limits. |\n\n#### JSON Example\n\
        \n```json\n{\n    \"lower_limit\": 0,\n    \"upper_limit\": 20,\n    \"shipping_cost\"\
        : 8\n}\n```"
      operationId: getAShippingMethod
      responses:
        '200':
          content:
            application/json:
              examples:
                Example 1:
                  value:
                    enabled: true
                    handling_fees:
                      fixed_surcharge: '0'
                    id: 1
                    is_fallback: false
                    name: Flat Rate
                    settings:
                      rate: 12
                    type: perorder
                Example 2:
                  value:
                    enabled: false
                    handling_fees:
                      percentage_surcharge: '0'
                    id: 71711609
                    is_fallback: false
                    name: nisi
                    settings: {}
                    type: weight
              schema:
                properties:
                  enabled:
                    description: Whether or not this shipping zone method is enabled.
                    example: true
                    type: boolean
                  handling_fees:
                    oneOf:
                    - properties:
                        fixed_surcharge:
                          description: Flat-rate handling fee applied to shipping
                            cost.
                          example: 0
                          type: number
                      title: fixed surcharge
                    - properties:
                        percentage_surcharge:
                          description: Percentage handling fee applied to shipping
                            cost.
                          example: 0
                          type: number
                      title: percentage surcharge
                    type: object
                  id:
                    description: Shipping method ID. Read-only.
                    example: 1
                    readOnly: true
                    type: integer
                  is_fallback:
                    description: Whether or not this shipping zone is the fallback
                      if all others are not valid for the order.
                    example: false
                    type: boolean
                  name:
                    description: Display name for shipping method.
                    example: Flat Rate
                    type: string
                  settings:
                    description: Depends on the shipping method type. See the [supported
                      settings object](#supported-settings).
                    type: object
                  type:
                    $ref: '#/components/schemas/ShippingMethodType'
                title: Shipping Method
                type: object
          description: ''
      summary: Get a Shipping Method
      tags:
      - Shipping Method
      x-operation-settings:
        AllowDynamicFormParameters: false
        AllowDynamicQueryParameters: false
        CollectParameters: false
        IsMultiContentStreaming: false
      x-unitTests: []
    parameters:
    - $ref: '#/components/parameters/Accept'
    - description: ID of the shipping zone.
      in: path
      name: zone_id
      required: true
      schema:
        exclusiveMaximum: false
        exclusiveMinimum: false
        type: integer
    - description: ID of the shipping method within the shipping zone.
      in: path
      name: method_id
      required: true
      schema:
        exclusiveMaximum: false
        exclusiveMinimum: false
        type: integer
    put:
      description: "Updates a *Shipping Method* in a zone. Real Time Carrier Connections\
        \ are also supported by this endpoint. \n\n**Read Only Fields**\n* id\n\n\
        ### Settings Objects \n\nA shipping methodʼs `type` and `settings` properties\
        \ can match one of the following models:\n\n#### perorder Object – Properties\
        \ \n\nObject model for flat-rate shipping quotes per order.\n\n| Property\
        \ | Type | Description |\n|:---------|:-----|:------------|\n| rate | number\
        \ | Flat rate per order. |\n\nExample response: \n\n```json\n{\n  \"name\"\
        : \"Flat Rate per Order\",\n  \"type\": \"perorder\",\n  \"settings\": {\n\
        \    \"rate\": 7\n  }\n},\n```\n\n#### peritem Object – Properties \n\nObject\
        \ model for flat-rate shipping quotes per item ordered.\n\n| Property | Type\
        \ | Description |\n|:---------|:-----|:------------|\n| rate | number | Flat\
        \ rate per item. |\n\nExample response: \n\n```json\n{\n  \"name\": \"Flat\
        \ Rate per Item\",\n  \"type\": \"peritem\",\n  \"settings\": {\n    \"rate\"\
        : 8\n  }\n},\n```\n\n#### weight Object – Properties \n\nObject model for\
        \ shipping quotes by weight.\n\n| Property | Type | Description |\n|:---------|:-----|:------------|\n\
        | default_cost | number | Default shipping cost, applied either as a percentage\
        \ of the orderʼs total value or as a fixed amount. |\n| default_cost_type\
        \ | string | How the default shipping cost is calculated; either `percentage_of_total`\
        \ or `fixed_amount`. |\n| range | number | Array of [range](#range) objects.\
        \ The units for these ranges' `lower_limit` and `upper_limit` properties depend\
        \ on the default units set in the storeʼs control panel. |\n\n\nExample response:\
        \ \n  \n```json\n{\n  \"name\": \"Rate per Weight\",\n  \"type\": \"weight\"\
        ,\n  \"settings\": {\n    \"default_cost\": 12,\n    \"default_cost_type\"\
        : \"fixed_amount\",\n    \"range\": [\n      {\n        \"lower_limit\": 0,\n\
        \        \"upper_limit\": 20,\n        \"shipping_cost\": 8\n      },\n  \
        \    {\n        \"lower_limit\": 20,\n        \"upper_limit\": 40,\n     \
        \   \"shipping_cost\": 12\n      }\n    ]\n  }\n}\n```\n\n#### total Object\
        \ – Properties \n\nObject model for shipping quotes by orderʼs total value.\n\
        \n| Property | Type | Description |\n|:---------|:-----|:------------|\n|\
        \ default_cost | number | Default shipping cost, applied either as a percentage\
        \ of the orderʼs total value or as a fixed amount. |\n| default_cost_type\
        \ | string | How the default shipping cost is calculated; either `percentage_of_total`\
        \ or `fixed_amount`. |\n| include_order_total_taxes | boolean | Whether or\
        \ not to include taxes on the orderʼs total value in the shipping cost calculation.\
        \ |\n| range | number | Array of [range](#range) objects. The units for these\
        \ ranges' `lower_limit` and `upper_limit` properties are values in the storeʼs\
        \ currency. |\n\nExample response: \n\nThis example sets free shipping above\
        \ a certain order total:\n\n```json\n{\n  \"name\": \"Per Total or Free\"\
        ,\n  \"type\": \"total\",\n  \"settings\": {\n    \"default_cost\": 12,\n\
        \    \"default_cost_type\": \"fixed_amount\",\n    \"include_order_total_taxes\"\
        : 0,\n    \"range\": [\n      {\n        \"lower_limit\": 0,\n        \"upper_limit\"\
        : 5,\n        \"shipping_cost\": 5\n      },\n      {\n        \"lower_limit\"\
        : 5,\n        \"upper_limit\": 10,\n        \"shipping_cost\": 8\n      },\n\
        \      {\n        \"lower_limit\": 10,\n        \"upper_limit\": 20,\n   \
        \     \"shipping_cost\": 10\n      },\n      {\n        \"lower_limit\": 20,\n\
        \        \"upper_limit\": 49.99,\n        \"shipping_cost\": 15\n      },\n\
        \      {\n        \"lower_limit\": 50,\n        \"upper_limit\": 100000,\n\
        \        \"shipping_cost\": 0\n      }       \n    ]\n  }\n}\n```\n\n####\
        \ Range Object – Properties \n\nObject model to define ranges for shipping\
        \ quotes. Units are defined in the parent object.\n\n| Property | Type | Description\
        \ |\n|:---------|:-----|:------------|\n| lower_limit | number | Lower limit\
        \ for order total. |\n| upper_limit | number | Upper limit for order total.\
        \ |\n| shipping_cost | number | Shipping cost for orders whose total falls\
        \ between the lower and upper limits. |\n\nExample response: \n\n```json\n\
        {\n  \"lower_limit\": 0,\n  \"upper_limit\": 20,\n  \"shipping_cost\": 8\n\
        }\n```"
      operationId: updateAShippingMethod
      parameters:
      - $ref: '#/components/parameters/ContentType'
      requestBody:
        content:
          application/json:
            example:
              handling_fees:
                fixed_surcharge: '0'
              settings:
                rate: 11
            schema:
              $ref: '#/components/schemas/shippingMethod_Base'
        required: true
      responses:
        '200':
          content:
            application/json:
              examples:
                Example 1:
                  value:
                    enabled: true
                    handling_fees:
                      fixed_surcharge: '0'
                    id: 5
                    name: Per Order
                    settings:
                      rate: 11
                    type: perorder
                Example 2:
                  value:
                    enabled: false
                    handling_fees:
                      fixed_surcharge: '0'
                    id: 8176684
                    is_fallback: false
                    name: in incididunt amet adipisicing
                    settings: {}
                    type: endicia
              schema:
                $ref: '#/components/schemas/shippingMethod_Full'
          description: ''
      summary: Update a Shipping Method
      tags:
      - Shipping Method
      x-operation-settings:
        AllowDynamicFormParameters: false
        AllowDynamicQueryParameters: false
        CollectParameters: false
        IsMultiContentStreaming: false
      x-unitTests: []
  /store:
    get:
      description: Returns metadata about a store.
      parameters:
      - description: ''
        in: header
        name: Accept
        required: true
        schema:
          default: application/json
          type: string
      - description: ''
        in: header
        name: Content-Type
        required: true
        schema:
          default: application/json
          type: string
      responses:
        '200':
          content:
            Response Schema:
              examples:
                response:
                  value:
                    address: tempor
                    admin_email: dolor commodo elit do
                    country: ex cupidatat
                    currency: amet in
                    currency_symbol: cupidatat deserunt est pariatur
                    currency_symbol_location: est cupidatat
                    decimal_places: {}
                    decimal_separator: in consectetur nisi officia
                    dimension_decimal_places: 50514826
                    dimension_decimal_token: deserunt est aliqua Duis
                    'dimension_thousands_token:': sint voluptate esse tempor
                    dimension_units: deserunt
                    domain: consequat ut amet
                    features:
                      checkout_type: qui mollit id aliqua ut
                      facebook_catalog_id: aliquip sed adipisicing quis
                      sitewidehttps_enabled: anim occaecat exercitation conse
                      stencil_enabled: true
                    first_name: ut dolore elit
                    id: nostrud pariatur incididunt
                    industry: pariatur culpa est
                    is_price_entered_with_tax: false
                    language: nulla commodo incididunt dolor ipsum
                    last_name: cupidatat minim
                    logo:
                      url: aliquip in aliqua consectetur ullamco
                    name: id qui cupidatat anim tempor
                    order_email: ea qui
                    phone: aliquip dolore pariatur
                    plan_level: pariatur ullamco veniam ad
                    plan_name: Ut
                    secure_URL: consectetur ullamco ut Excepteur
                    thousands_separator: ea irure occaecat qui
                    timezone:
                      date_format:
                        display: cupidatat
                        export: est
                        extended_display: cillum qui esse aliquip culpa
                      dst_correction: true
                      dst_offset: 36000
                      name: Australia/Sydney
                      raw_offset: 39600
                    weight_units: minim adipisicing do
            Time:
              schema:
                $ref: '#/components/schemas/StoreInformation'
            application/json:
              examples:
                response:
                  value:
                    active_comparison_modules: []
                    address: BigCommerce
                    admin_email: jane.does@example.com
                    control_panel_base_url: https://store-{store_hash}.mybigcommerce.com
                    country: United States
                    country_code: US
                    currency: USD
                    currency_symbol: $
                    currency_symbol_location: left
                    decimal_places: 2
                    decimal_separator: .
                    dimension_decimal_places: 2
                    dimension_decimal_token: .
                    dimension_thousands_token: ','
                    dimension_units: Inches
                    domain: my-awesome.store
                    favicon_url: https://cdn8.bigcommerce.com/r-8816ba2f48b0bcf4bec0c1a954c00e0fc36b/img/bc_favicon.ico
                    features:
                      checkout_type: optimized
                      facebook_catalog_id: ''
                      sitewidehttps_enabled: false
                      stencil_enabled: true
                    first_name: Jane
                    id: abc123
                    industry: ''
                    is_price_entered_with_tax: false
                    language: en
                    last_name: Doe
                    logo:
                      url: https://cdn8.bigcommerce.com/s-{store_hash}/product_images/screen_shot_2018-05-15_at_12.22.26_pm__05547_1529512135.png
                    name: BigCommerce
                    order_email: info@janedoes.mybigcommerce.com
                    phone: ''
                    plan_level: Standard
                    plan_name: Standard
                    secure_url: https://my-awesome.stor
                    status: live
                    thousands_separator: ','
                    timezone:
                      date_format:
                        display: M jS Y
                        export: M jS Y
                        extended_display: M jS Y @ g:i A
                      dst_correction: true
                      dst_offset: -18000
                      name: America/Chicago
                      raw_offset: -21600
                    weight_units: Ounces
          description: ''
      summary: Get Store Information
      tags:
      - Store Information
  /stores/{store_hash}/v2/orders/{order_id}/consignments:
    get:
      description: 'Get all consignments for an order. '
      operationId: get-orders-orderId-consignments
      parameters:
      - $ref: '#/components/parameters/store_hash'
      - $ref: '#/components/parameters/order_id_path'
      responses:
        '200':
          content:
            application/json:
              examples:
                Pickup Consignments:
                  value:
                    pickups:
                    - collection_instructions: Bring your ID
                      collection_time_description: 9am - 6pm
                      id: 99
                      line_items:
                      - resource: /orders/129/products/12
                        url: https://api.bigcommerce.com/stores/{store_hash}/v2/orders/129/products/12
                      location:
                        address_line_1: 123 Main Street
                        address_line_2: Suite 101
                        city: Austin
                        code: LOCATION-1
                        country_alpha2: US
                        email: location1@example.com
                        id: 1
                        name: Location 1
                        phone: +1 111-111-1111
                        postal_code: '78726'
                        state: Texas
                      pickup_method_display_name: Pick Up
                      pickup_method_id: 1
              schema:
                $ref: '#/components/schemas/orderConsignment_Get'
          description: OK
        '404':
          $ref: '#/components/responses/404_Resp'
      summary: Get Consignments
      tags:
      - Order Consignments
    parameters:
    - in: path
      name: order_id
      required: true
      schema:
        type: string
    - in: path
      name: store_hash
      required: true
      schema:
        type: string
  /stores/{store_hash}/v2/orders/{order_id}/consignments/shipping/{shipping_consignment_id}/shipping_quotes:
    get:
      description: 'Get all shipping quotes persisted on an order for a shipping consignment.

        This is a read-only endpoint whose response depends on the shipping quote.
        You can only generate a shipping quote using the storefront at this time.
        Orders that are created in the control panel, or using the API, return a 204
        status response since you can''t generate a shipping quote during that process.'
      operationId: get-orders-orderId-consignments-shipping-shippingId-shippingQuotes
      parameters:
      - $ref: '#/components/parameters/store_hash'
      - $ref: '#/components/parameters/order_id_path'
      - $ref: '#/components/parameters/shipping_consignment_id'
      responses:
        '200':
          content:
            application/json:
              examples:
                Fedex:
                  value:
                    carrier_code: ''
                    id: '43'
                    method_id: 5
                    provider_code: fedex
                    rate_code: ''
                    rate_id: ''
                    shipping_provider_id: bcrealtime
                    shipping_provider_quote:
                      additionalInfo: {}
                      carrierCode: {}
                      carrierName: ''
                      code: {}
                      dates: []
                      deliveryMessage: ''
                      description: ''
                      insuredMailFee: {}
                      labelSizes: []
                      name: Priority Overnight
                      rate:
                        unit: USD
                        value: '107.32'
                      rateId: {}
                      signatureConfirmationFee: {}
                      transitTime: '1'
                    timestamp: Fri, 24 Jun 2022 03:52:03 +0000
                    uuid: 551404b9-beeb-4e49-922b-3b8d85002863
                Fixed Shipping:
                  value:
                    carrier_code: ''
                    id: '42'
                    method_id: 2
                    provider_code: peritem
                    rate_code: ''
                    rate_id: ''
                    shipping_provider_id: bcstatic
                    shipping_provider_quote: []
                    timestamp: Fri, 24 Jun 2022 01:45:27 +0000
                    uuid: 7c65e0a0-cf46-4438-934e-c7b4edb31e18
              schema:
                $ref: '#/components/schemas/shippingQuotes_Base'
          description: OK
        '404':
          $ref: '#/components/responses/404_Resp'
      summary: Get Consignment Shipping Quotes
      tags:
      - Order Consignments
  /tax_classes:
    get:
      description: 'Returns a list of all *Tax Classes* in a store.


        Default sorting is by tax-class id, from lowest to highest.'
      operationId: getAllTaxClasses
      parameters:
      - $ref: '#/components/parameters/Accept'
      - description: Optional filter param. Number of pages.
        in: query
        name: page
        schema:
          exclusiveMaximum: false
          exclusiveMinimum: false
          maximum: 50
          type: number
      - description: Optional filter param. Number of items per page
        in: query
        name: limit
        schema:
          exclusiveMaximum: false
          exclusiveMinimum: false
          maximum: 250
          type: number
      responses:
        '200':
          content:
            application/json:
              example:
              - created_at: 1973-01-20 21:34:57.903000+00:00
                id: '1'
                name: Non-Taxable Products
                updated_at: 1990-12-30 00:29:23.515000+00:00
              - created_at: 1973-01-20 21:34:57.903000+00:00
                id: '2'
                name: Shipping
                updated_at: 1990-12-30 00:29:23.515000+00:00
              - created_at: 1973-01-20 21:34:57.903000+00:00
                id: '3'
                name: Gift Wrapping
                updated_at: 1990-12-30 00:29:23.515000+00:00
              schema:
                items:
                  $ref: '#/components/schemas/taxClass_Full'
                type: array
          description: ''
      summary: Get All Tax Classes
      tags:
      - Taxes
      x-operation-settings:
        AllowDynamicFormParameters: false
        AllowDynamicQueryParameters: false
        CollectParameters: false
        IsMultiContentStreaming: false
      x-unitTests: []
  /tax_classes/{id}:
    get:
      description: Returns a single *Tax Class*.
      operationId: getATaxClass
      parameters:
      - $ref: '#/components/parameters/Accept'
      - description: ID of the tax class.
        in: path
        name: id
        required: true
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              example:
                created_at: 1973-01-20 21:34:57.903000+00:00
                id: '1'
                name: Shipping
                updated_at: 1990-12-30 00:29:23.515000+00:00
              schema:
                $ref: '#/components/schemas/taxClass_Full'
          description: ''
      summary: Get a Tax Class
      tags:
      - Taxes
      x-operation-settings:
        AllowDynamicFormParameters: false
        AllowDynamicQueryParameters: false
        CollectParameters: false
        IsMultiContentStreaming: false
      x-unitTests: []
  /time:
    get:
      description: Returns the system timestamp at the time of the request. The time
        resource is useful for validating API authentication details and testing client
        connections.
      parameters:
      - description: ''
        in: header
        name: Accept
        required: true
        schema:
          default: application/json
          type: string
      - description: ''
        in: header
        name: Content-Type
        required: true
        schema:
          default: application/json
          type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                response:
                  value:
                    time: 1529512970
              schema:
                $ref: '#/components/schemas/timeStamp_Full'
          description: ''
      summary: Get System Timestamp
      tags:
      - Time Zone
security:
  X-Auth-Token: []
servers:
  url: https://api.bigcommerce.com/stores/{store_hash}/v2
  variables:
    description: BigCommerce API Gateway
    store_hash:
      default: store_hash
      description: Permanent ID of the BigCommerce store.
